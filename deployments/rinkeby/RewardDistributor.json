{
  "address": "0x57A53966c8BD3B9398199AE06bAC9832ACEB5907",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "contract GToken",
          "name": "gToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "contract GToken",
          "name": "gToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "JoeGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "contract GToken",
          "name": "gToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "RewardSpeedUpdated",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_grantJoe",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "internalType": "contract GToken",
          "name": "gToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardSpeed",
          "type": "uint256"
        }
      ],
      "name": "_setRewardSpeed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract GToken[]",
          "name": "gTokens",
          "type": "address[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "rewardType",
          "type": "uint8"
        },
        {
          "internalType": "address payable[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract GToken[]",
          "name": "gTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "joeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "gTroller",
      "outputs": [
        {
          "internalType": "contract Gtroller",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newJoeAddress",
          "type": "address"
        }
      ],
      "name": "setJoeAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_gTroller",
          "type": "address"
        }
      ],
      "name": "setGtroller",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "gToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mantissa",
              "type": "uint256"
            }
          ],
          "internalType": "struct Exponential.Exp",
          "name": "marketBorrowIndex",
          "type": "tuple"
        }
      ],
      "name": "updateAndDistributeBorrowerRewardsForToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "gToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "updateAndDistributeSupplierRewardsForToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x719cf189189993d1e467daa314fda31a7960f73ddde7273869adc0c475e9403a",
  "receipt": {
    "to": null,
    "from": "0x5D3e4C0FE11e0aE4c32F0FF74B4544C49538AC61",
    "contractAddress": "0x57A53966c8BD3B9398199AE06bAC9832ACEB5907",
    "transactionIndex": 0,
    "gasUsed": "2384147",
    "logsBloom": "0x
    "blockHash": "0x99506ba608f475e28baa6e41722517eeaf9f9a4f2a0f922234dbb745c3a66881",
    "transactionHash": "0x719cf189189993d1e467daa314fda31a7960f73ddde7273869adc0c475e9403a",
    "logs": [],
    "blockNumber": 9277586,
    "cumulativeGasUsed": "2384147",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "63cb0dd0e69bd9531ff968a19523531b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"contract GToken\",\"name\":\"gToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"contract GToken\",\"name\":\"gToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JoeGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"contract GToken\",\"name\":\"gToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"RewardSpeedUpdated\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantJoe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"contract GToken\",\"name\":\"gToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardSpeed\",\"type\":\"uint256\"}],\"name\":\"_setRewardSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract GToken[]\",\"name\":\"gTokens\",\"type\":\"address[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address payable[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract GToken[]\",\"name\":\"gTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gTroller\",\"outputs\":[{\"internalType\":\"contract Gtroller\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newJoeAddress\",\"type\":\"address\"}],\"name\":\"setJoeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gTroller\",\"type\":\"address\"}],\"name\":\"setGtroller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct Exponential.Exp\",\"name\":\"marketBorrowIndex\",\"type\":\"tuple\"}],\"name\":\"updateAndDistributeBorrowerRewardsForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"updateAndDistributeSupplierRewardsForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"_grantJoe(address,uint256)\":{\"details\":\"Note: If there is not enough JOE, we do not perform the transfer all.\",\"params\":{\"amount\":\"The amount of JOE to (possibly) transfer\",\"recipient\":\"The address of the recipient to transfer JOE to\"}},\"_setRewardSpeed(uint8,address,uint256)\":{\"params\":{\"gToken\":\"The market whose reward speed to update\",\"rewardSpeed\":\"New reward speed for market\",\"rewardType\":\"0 = QI, 1 = AVAX\"}},\"claimReward(uint8,address)\":{\"params\":{\"holder\":\"The address to claim JOE/AVAX for\"}},\"claimReward(uint8,address,address[])\":{\"params\":{\"holder\":\"The address to claim JOE/AVAX for\",\"gTokens\":\"The list of markets to claim JOE/AVAX in\"}},\"claimReward(uint8,address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim JOE/AVAX earned by borrowing\",\"holders\":\"The addresses to claim JOE/AVAX for\",\"gTokens\":\"The list of markets to claim JOE/AVAX in\",\"rewardType\":\"0 = JOE, 1 = AVAX\",\"suppliers\":\"Whether or not to claim JOE/AVAX earned by supplying\"}},\"updateAndDistributeBorrowerRewardsForToken(address,address,(uint256))\":{\"params\":{\"borrower\":\"Borrower to be rewarded\",\"gToken\":\"The market to verify the mint against\"}},\"updateAndDistributeSupplierRewardsForToken(address,address)\":{\"params\":{\"gToken\":\"The market to verify the mint against\",\"supplier\":\"The supplier to be rewarded\"}}}},\"userdoc\":{\"methods\":{\"_grantJoe(address,uint256)\":{\"notice\":\"Transfer JOE to the recipient\"},\"_setRewardSpeed(uint8,address,uint256)\":{\"notice\":\"Set JOE/AVAX speed for a single market\"},\"claimReward(uint8,address)\":{\"notice\":\"Claim all the JOE/AVAX accrued by holder in all markets\"},\"claimReward(uint8,address,address[])\":{\"notice\":\"Claim all the JOE/AVAX accrued by holder in the specified markets\"},\"claimReward(uint8,address[],address[],bool,bool)\":{\"notice\":\"Claim all JOE/AVAX  accrued by the holders\"},\"setAdmin(address)\":{\"notice\":\"Set the admin\"},\"setJoeAddress(address)\":{\"notice\":\"Set the JOE token address\"},\"setGtroller(address)\":{\"notice\":\"Set the Gtroller address\"},\"updateAndDistributeBorrowerRewardsForToken(address,address,(uint256))\":{\"notice\":\"Refactored function to calc and rewards accounts supplier rewards\"},\"updateAndDistributeSupplierRewardsForToken(address,address)\":{\"notice\":\"Refactored function to calc and rewards accounts supplier rewards\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/RewardDistributor.sol\":\"RewardDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n        uint256 c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x458de49aa8c70be5b88d92d242caa5f647ee0f74570eda81a9276e969ba94f7f\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf0c362ddd4ebdde949af559b3d37b6c2b666773fbdc81ed864493ffa9c381bd9\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5046e86e5a524462517a0fc0dda5630b8cc9440f7d918c226cb8b44b1d037367\"},\"contracts/ERC3156FlashBorrowerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\ninterface ERC3156FlashBorrowerInterface {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x999423c3ee943cf759d3187e9f1f6cbd4b8455fe0f7736f8c5b2987ef9c899f2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\ncontract GtrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        JOETROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        JOETROLLER_REJECTION,\\n        JOETROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_JOETROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_JOETROLLER_REJECTION,\\n        LIQUIDATE_JOETROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_JOETROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_JOETROLLER_REJECTION,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_JOETROLLER_REJECTION,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_JOETROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_JOETROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_JOETROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\",\"keccak256\":\"0xf473b16caa0a8081ab7f9844e2754e619f94b7356c724320bffb3141868548d5\"},\"contracts/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n    uint256 constant halfExpScale = expScale / 2;\\n    uint256 constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function div_ScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        uint256 numerator = mul_(expScale, scalar);\\n        return Exp({mantissa: div_(numerator, divisor)});\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function div_ScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (uint256) {\\n        Exp memory fraction = div_ScalarByExp(scalar, divisor);\\n        return truncate(fraction);\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n\\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xf8507369462982bc2fb7200d9039467851b3403afdc637adbee4b629b1927e0f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per sec\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per sec (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per sec\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per sec (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7ca611215903c5068643656d02f87c5576f6770ced6dc5b87a49b125d7d007ae\"},\"contracts/GToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./GtrollerInterface.sol\\\";\\nimport \\\"./GTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's GToken Contract\\n * @notice Abstract base for GTokens\\n * @author Compound\\n */\\ncontract GToken is GTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param gTroller_ The address of the Gtroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        GtrollerInterface gTroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockTimestamp == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the gTroller\\n        uint256 err = _setGtroller(gTroller_);\\n        require(err == uint256(Error.NO_ERROR), \\\"setting gTroller failed\\\");\\n\\n        // Initialize block timestamp and borrow index (block timestamp mocks depend on gTroller being set)\\n        accrualBlockTimestamp = getBlockTimestamp();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block timestamp / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint256(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by gTroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 gTokenBalance = getGTokenBalanceInternal(account);\\n        uint256 borrowBalance = borrowBalanceStoredInternal(account);\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\n\\n        return (uint256(Error.NO_ERROR), gTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block timestamp \\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockTimestamp() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-sec borrow interest rate for this gToken\\n     * @return The borrow interest rate per sec, scaled by 1e18\\n     */\\n    function borrowRatePerSecond() external view returns (uint256) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-sec supply interest rate for this gToken\\n     * @return The supply interest rate per sec, scaled by 1e18\\n     */\\n    function supplyRatePerSecond() external view returns (uint256) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the estimated per-sec borrow interest rate for this gToken after some change\\n     * @return The borrow interest rate per sec, scaled by 1e18\\n     */\\n    function estimateBorrowRatePerSecondAfterChange(uint256 change, bool repay) external view returns (uint256) {\\n        uint256 cashPriorNew;\\n        uint256 totalBorrowsNew;\\n\\n        if (repay) {\\n            cashPriorNew = add_(getCashPrior(), change);\\n            totalBorrowsNew = sub_(totalBorrows, change);\\n        } else {\\n            cashPriorNew = sub_(getCashPrior(), change);\\n            totalBorrowsNew = add_(totalBorrows, change);\\n        }\\n        return interestRateModel.getBorrowRate(cashPriorNew, totalBorrowsNew, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the estimated per-sec supply interest rate for this gToken after some change\\n     * @return The supply interest rate per sec, scaled by 1e18\\n     */\\n    function estimateSupplyRatePerSecondAfterChange(uint256 change, bool repay) external view returns (uint256) {\\n        uint256 cashPriorNew;\\n        uint256 totalBorrowsNew;\\n\\n        if (repay) {\\n            cashPriorNew = add_(getCashPrior(), change);\\n            totalBorrowsNew = sub_(totalBorrows, change);\\n        } else {\\n            cashPriorNew = sub_(getCashPrior(), change);\\n            totalBorrowsNew = add_(totalBorrows, change);\\n        }\\n\\n        return interestRateModel.getSupplyRate(cashPriorNew, totalBorrowsNew, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint256) {\\n        require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint256) {\\n        require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint256) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint256 principalTimesIndex = mul_(borrowSnapshot.principal, borrowIndex);\\n        uint256 result = div_(principalTimesIndex, borrowSnapshot.interestIndex);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint256) {\\n        require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the GToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint256) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the GToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view returns (uint256) {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint256 totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves = sub_(add_(totalCash, totalBorrows), totalReserves);\\n            uint256 exchangeRate = div_(cashPlusBorrowsMinusReserves, Exp({mantissa: _totalSupply}));\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this gToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed timestamp \\n     *   up to the current timestamp and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint256) {\\n        /* Remember the initial block timestamp */\\n        uint256 currentBlockTimestamp = getBlockTimestamp();\\n        uint256 accrualBlockTimestampPrior = accrualBlockTimestamp;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockTimestampPrior == currentBlockTimestamp) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows;\\n        uint256 reservesPrior = totalReserves;\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of seconds elapsed since the last accrual */\\n        uint256 timestampDelta = sub_(currentBlockTimestamp, accrualBlockTimestampPrior);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * timestampDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), timestampDelta);\\n        uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        uint256 totalBorrowsNew = add_(interestAccumulated, borrowsPrior);\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockTimestamp = currentBlockTimestamp;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives gTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint256 mintAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender redeems gTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of gTokens to redeem into underlying\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint256 redeemTokens, bool isNative) internal nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender redeems gTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming gTokens\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint256 redeemAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount, isNative);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowInternal(uint256 borrowAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount, isNative);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowFresh(\\n        address payable borrower,\\n        uint256 borrowAmount,\\n        bool isNative\\n    ) internal returns (uint256) {\\n        /* Fail if borrow not allowed */\\n        uint256 allowed = gTroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.JOETROLLER_REJECTION, FailureInfo.BORROW_JOETROLLER_REJECTION, allowed);\\n        }\\n\\n        /*\\n         * Return if borrowAmount is zero.\\n         * Put behind `borrowAllowed` for accuring potential JOE rewards.\\n         */\\n        if (borrowAmount == 0) {\\n            accountBorrows[borrower].interestIndex = borrowIndex;\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n        vars.accountBorrowsNew = add_(vars.accountBorrows, borrowAmount);\\n        vars.totalBorrowsNew = add_(totalBorrows, borrowAmount);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The gToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the gToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount, isNative);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // gTroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint256 repayAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount, isNative);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 repayAmount;\\n        uint256 borrowerIndex;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n        uint256 actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if repayBorrow not allowed */\\n        uint256 allowed = gTroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.JOETROLLER_REJECTION, FailureInfo.REPAY_BORROW_JOETROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /*\\n         * Return if repayAmount is zero.\\n         * Put behind `repayBorrowAllowed` for accuring potential JOE rewards.\\n         */\\n        if (repayAmount == 0) {\\n            accountBorrows[borrower].interestIndex = borrowIndex;\\n            return (uint256(Error.NO_ERROR), 0);\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint256(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The gToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the gToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount, isNative);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        vars.accountBorrowsNew = sub_(vars.accountBorrows, vars.actualRepayAmount);\\n        vars.totalBorrowsNew = sub_(totalBorrows, vars.actualRepayAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // gTroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this gToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param gTokenCollateral The market in which to seize collateral from the borrower\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        GTokenInterface gTokenCollateral,\\n        bool isNative\\n    ) internal nonReentrant returns (uint256, uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = gTokenCollateral.accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, gTokenCollateral, isNative);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this gToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param gTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        GTokenInterface gTokenCollateral,\\n        bool isNative\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if liquidate not allowed */\\n        uint256 allowed = gTroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(gTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.JOETROLLER_REJECTION, FailureInfo.LIQUIDATE_JOETROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block timestamp equals current block timestamp */\\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify gTokenCollateral market's block timestamp equals current block timestamp */\\n        if (gTokenCollateral.accrualBlockTimestamp() != getBlockTimestamp()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint256(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (uint256 repayBorrowError, uint256 actualRepayAmount) = repayBorrowFresh(\\n            liquidator,\\n            borrower,\\n            repayAmount,\\n            isNative\\n        );\\n        if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint256 amountSeizeError, uint256 seizeTokens) = gTroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(gTokenCollateral),\\n            actualRepayAmount\\n        );\\n        require(amountSeizeError == uint256(Error.NO_ERROR), \\\"LIQUIDATE_JOETROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(gTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint256 seizeError;\\n        if (address(gTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = gTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(gTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // gTroller.liquidateBorrowVerify(address(this), address(gTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint256(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another gToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed gToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of gTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external nonReentrant returns (uint256) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external returns (uint256) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new gTroller for the market\\n     * @dev Admin function to set a new gTroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setGtroller(GtrollerInterface newGtroller) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_JOETROLLER_OWNER_CHECK);\\n        }\\n\\n        GtrollerInterface oldGtroller = gTroller;\\n        // Ensure invoke gTroller.isGtroller() returns true\\n        require(newGtroller.isGtroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's gTroller to newGtroller\\n        gTroller = newGtroller;\\n\\n        // Emit NewGtroller(oldGtroller, newGtroller)\\n        emit NewGtroller(oldGtroller, newGtroller);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block timestamp equals current block timestamp \\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @param isNative The amount is in native or not\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint256 addAmount, bool isNative) internal nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount, isNative);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @param isNative The amount is in native or not\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint256 addAmount, bool isNative) internal returns (uint256, uint256) {\\n        // totalReserves + actualAddAmount\\n        uint256 totalReservesNew;\\n        uint256 actualAddAmount;\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp \\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The gToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the gToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount, isNative);\\n\\n        totalReservesNew = add_(totalReserves, actualAddAmount);\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint256(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint256 reduceAmount) external nonReentrant returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n        // totalReserves - reduceAmount\\n        uint256 totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp \\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        // Restrict reducing reserves in native token. Implementations except `GWrappedNative` won't use parameter `isNative`.\\n        doTransferOut(admin, reduceAmount, true);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block timestamp equals current block timestamp \\n        if (accrualBlockTimestamp != getBlockTimestamp()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount,\\n        bool isNative\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(\\n        address payable to,\\n        uint256 amount,\\n        bool isNative\\n    ) internal;\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @notice Get the account's gToken balances\\n     */\\n    function getGTokenBalanceInternal(address account) internal view returns (uint256);\\n\\n    /**\\n     * @notice User supplies assets into the market and receives gTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current timestamp\\n     */\\n    function mintFresh(\\n        address minter,\\n        uint256 mintAmount,\\n        bool isNative\\n    ) internal returns (uint256, uint256);\\n\\n    /**\\n     * @notice User redeems gTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current timestamp \\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn,\\n        bool isNative\\n    ) internal returns (uint256);\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another GToken.\\n     *  Its absolutely critical to use msg.sender as the seizer gToken and not a parameter.\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256);\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x6d1b53d10acdfe19a41f483243c1dfc8e7c1638d15074eb0e49c378512ab5e2b\"},\"contracts/GTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./GtrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ERC3156FlashBorrowerInterface.sol\\\";\\n\\ncontract GTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / sec)\\n     */\\n\\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-gToken operations\\n     */\\n    GtrollerInterface public gTroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first GTokens (used when totalSupply = 0)\\n     */\\n    uint256 internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint256 public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block timestamp that interest was last accrued at\\n     */\\n    uint256 public accrualBlockTimestamp;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint256) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract GXrc20Storage {\\n    /**\\n     * @notice Underlying asset for this GToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract JSupplyCapStorage {\\n    /**\\n     * @notice Internal cash counter for this GToken. Should equal underlying.balanceOf(address(this)) for CERC20.\\n     */\\n    uint256 public internalCash;\\n}\\n\\ncontract JCollateralCapStorage {\\n    /**\\n     * @notice Total number of tokens used as collateral in circulation.\\n     */\\n    uint256 public totalCollateralTokens;\\n\\n    /**\\n     * @notice Record of token balances which could be treated as collateral for each account.\\n     *         If collateral cap is not set, the value should be equal to accountTokens.\\n     */\\n    mapping(address => uint256) public accountCollateralTokens;\\n\\n    /**\\n     * @notice Check if accountCollateralTokens have been initialized.\\n     */\\n    mapping(address => bool) public isCollateralTokenInit;\\n\\n    /**\\n     * @notice Collateral cap for this GToken, zero for no cap.\\n     */\\n    uint256 public collateralCap;\\n}\\n\\n/*** Interface ***/\\n\\ncontract GTokenInterface is GTokenStorage {\\n    /**\\n     * @notice Indicator that this is a GToken contract (for inspection)\\n     */\\n    bool public constant isGToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address gTokenCollateral,\\n        uint256 seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when gTroller is changed\\n     */\\n    event NewGtroller(GtrollerInterface oldGtroller, GtrollerInterface newGtroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerSecond() external view returns (uint256);\\n\\n    function supplyRatePerSecond() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) public view returns (uint256);\\n\\n    function exchangeRateCurrent() public returns (uint256);\\n\\n    function exchangeRateStored() public view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() public returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setGtroller(GtrollerInterface newGtroller) public returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256);\\n}\\n\\ncontract GXrc20Interface is GXrc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        GTokenInterface gTokenCollateral\\n    ) external returns (uint256);\\n\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ncontract GWrappedNativeInterface is GXrc20Interface {\\n    /**\\n     * @notice Flash loan fee ratio\\n     */\\n    uint256 public constant flashFeeBips = 3;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occured\\n     */\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\n\\n    /*** User Interface ***/\\n\\n    function mintNative() external payable returns (uint256);\\n\\n    function redeemNative(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlyingNative(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowNative(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowNative() external payable returns (uint256);\\n\\n    function liquidateBorrowNative(address borrower, GTokenInterface gTokenCollateral)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function _addReservesNative() external payable returns (uint256);\\n}\\n\\ncontract GCapableXrc20Interface is GXrc20Interface, JSupplyCapStorage {\\n    /**\\n     * @notice Flash loan fee ratio\\n     */\\n    uint256 public constant flashFeeBips = 3;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occured\\n     */\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\n\\n    /*** User Interface ***/\\n\\n    function gulp() external;\\n}\\n\\ncontract GCollateralCapXrc20Interface is GCapableXrc20Interface, JCollateralCapStorage {\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when collateral cap is set\\n     */\\n    event NewCollateralCap(address token, uint256 newCap);\\n\\n    /**\\n     * @notice Event emitted when user collateral is changed\\n     */\\n    event UserCollateralChanged(address account, uint256 newCollateralTokens);\\n\\n    /*** User Interface ***/\\n\\n    function registerCollateral(address account) external returns (uint256);\\n\\n    function unregisterCollateral(address account) external;\\n\\n    function flashLoan(\\n        ERC3156FlashBorrowerInterface receiver,\\n        address initiator,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setCollateralCap(uint256 newCollateralCap) external;\\n}\\n\\ncontract JDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public;\\n}\\n\\ncontract JDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\\n/*** External interface ***/\\n\\n/**\\n * @title Flash loan receiver interface\\n */\\ninterface IFlashloanReceiver {\\n    function executeOperation(\\n        address sender,\\n        address underlying,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0c51759e5663b86d5ce4addcf8e50bd3755a7b249a3a00ca143820881069a6b7\"},\"contracts/Gtroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GToken.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./PriceOracle/PriceOracle.sol\\\";\\nimport \\\"./GtrollerInterface.sol\\\";\\nimport \\\"./GtrollerStorage.sol\\\";\\nimport \\\"./RewardDistributor.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\n\\n/**\\n * @title Compound's Gtroller Contract\\n * @author Compound (modified by Cream)\\n */\\ncontract Gtroller is GtrollerV1Storage, GtrollerInterface, GtrollerErrorReporter, Exponential {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(GToken gToken);\\n\\n    /// @notice Emitted when an admin delists a market\\n    event MarketDelisted(GToken gToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(GToken gToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(GToken gToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(GToken gToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(GToken gToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when borrow cap for a gToken is changed\\n    event NewBorrowCap(GToken indexed gToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n    /// @notice Emitted when supply cap for a gToken is changed\\n    event NewSupplyCap(GToken indexed gToken, uint256 newSupplyCap);\\n\\n    /// @notice Emitted when supply cap guardian is changed\\n    event NewSupplyCapGuardian(address oldSupplyCapGuardian, address newSupplyCapGuardian);\\n\\n    /// @notice Emitted when protocol's credit limit has changed\\n    event CreditLimitChanged(address protocol, uint256 creditLimit);\\n\\n    /// @notice Emitted when gToken version is changed\\n    event NewGTokenVersion(GToken gToken, Version oldVersion, Version newVersion);\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    constructor() public {\\n      admin = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (GToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    function getBlockTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (GToken[] memory) {\\n        GToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param gToken The gToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, GToken gToken) external view returns (bool) {\\n        return markets[address(gToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param gTokens The list of addresses of the gToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory gTokens) public returns (uint256[] memory) {\\n        uint256 len = gTokens.length;\\n\\n        uint256[] memory results = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            GToken gToken = GToken(gTokens[i]);\\n\\n            results[i] = uint256(addToMarketInternal(gToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param gToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(GToken gToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(gToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.version == Version.COLLATERALCAP) {\\n            // register collateral for the borrower if the token is CollateralCap version.\\n            GCollateralCapXrc20Interface(address(gToken)).registerCollateral(borrower);\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(gToken);\\n\\n        emit MarketEntered(gToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param gTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address gTokenAddress) external returns (uint256) {\\n        GToken gToken = GToken(gTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the gToken */\\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = gToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint256 allowed = redeemAllowedInternal(gTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[gTokenAddress];\\n\\n        if (marketToExit.version == Version.COLLATERALCAP) {\\n            GCollateralCapXrc20Interface(gTokenAddress).unregisterCollateral(msg.sender);\\n        }\\n\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Set gToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete gToken from the account\\u2019s list of assets */\\n        // load into memory for faster iteration\\n        GToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == gToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        GToken[] storage storedList = accountAssets[msg.sender];\\n        if (assetIndex != storedList.length - 1) {\\n            storedList[assetIndex] = storedList[storedList.length - 1];\\n        }\\n        storedList.length--;\\n\\n        emit MarketExited(gToken, msg.sender);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Return a specific market is listed or not\\n     * @param gTokenAddress The address of the asset to be checked\\n     * @return Whether or not the market is listed\\n     */\\n    function isMarketListed(address gTokenAddress) public view returns (bool) {\\n        return markets[gTokenAddress].isListed;\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param gToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(\\n        address gToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[gToken], \\\"mint is paused\\\");\\n        require(!isCreditAccount(minter), \\\"credit account cannot mint\\\");\\n\\n        if (!isMarketListed(gToken)) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        uint256 supplyCap = supplyCaps[gToken];\\n        // Supply cap of 0 corresponds to unlimited supplying\\n        if (supplyCap != 0) {\\n            uint256 totalCash = GToken(gToken).getCash();\\n            uint256 totalBorrows = GToken(gToken).totalBorrows();\\n            uint256 totalReserves = GToken(gToken).totalReserves();\\n            // totalSupplies = totalCash + totalBorrows - totalReserves\\n            (MathError mathErr, uint256 totalSupplies) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            require(mathErr == MathError.NO_ERROR, \\\"totalSupplies failed\\\");\\n\\n            uint256 nextTotalSupplies = add_(totalSupplies, mintAmount);\\n            require(nextTotalSupplies < supplyCap, \\\"market supply cap reached\\\");\\n        }\\n\\n        // Keep the flywheel moving\\n        RewardDistributor(rewardDistributor).updateAndDistributeSupplierRewardsForToken(gToken, minter);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param gToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(\\n        address gToken,\\n        address minter,\\n        uint256 actualMintAmount,\\n        uint256 mintTokens\\n    ) external {\\n        // Shh - currently unused\\n        gToken;\\n        minter;\\n        actualMintAmount;\\n        mintTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            closeFactorMantissa = closeFactorMantissa;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param gToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of gTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(\\n        address gToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256) {\\n        uint256 allowed = redeemAllowedInternal(gToken, redeemer, redeemTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n          return allowed;\\n        }\\n        \\n        // Keep the flywheel going\\n        RewardDistributor(rewardDistributor).updateAndDistributeSupplierRewardsForToken(gToken, redeemer);\\n        return uint256(Error.NO_ERROR);\\n\\n    }\\n\\n    function redeemAllowedInternal(\\n        address gToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        if (!isMarketListed(gToken)) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[gToken].accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            redeemer,\\n            GToken(gToken),\\n            redeemTokens,\\n            0\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param gToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(\\n        address gToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external {\\n        // Shh - currently unused\\n        gToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param gToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(\\n        address gToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[gToken], \\\"borrow is paused\\\");\\n\\n        if (!isMarketListed(gToken)) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[gToken].accountMembership[borrower]) {\\n            // only gTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == gToken, \\\"sender must be gToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(GToken(gToken), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[gToken].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(GToken(gToken)) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        uint256 borrowCap = borrowCaps[gToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = GToken(gToken).totalBorrows();\\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        (Error err, , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            borrower,\\n            GToken(gToken),\\n            0,\\n            borrowAmount\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n\\n        // Keep the flywheel going\\n        Exp memory borrowIndex = Exp({mantissa: GToken(gToken).borrowIndex()});\\n        RewardDistributor(rewardDistributor).updateAndDistributeBorrowerRewardsForToken(gToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param gToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(\\n        address gToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external {\\n        // Shh - currently unused\\n        gToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            closeFactorMantissa = closeFactorMantissa;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param gToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address gToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!isMarketListed(gToken)) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel going\\n        Exp memory borrowIndex = Exp({mantissa: GToken(gToken).borrowIndex()});\\n        RewardDistributor(rewardDistributor).updateAndDistributeBorrowerRewardsForToken(gToken, borrower, borrowIndex);\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param gToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address gToken,\\n        address payer,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 borrowerIndex\\n    ) external {\\n        // Shh - currently unused\\n        gToken;\\n        payer;\\n        borrower;\\n        actualRepayAmount;\\n        borrowerIndex;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            closeFactorMantissa = closeFactorMantissa;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param gTokenBorrowed Asset which was borrowed by the borrower\\n     * @param gTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address gTokenBorrowed,\\n        address gTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256) {\\n        require(!isCreditAccount(borrower), \\\"cannot liquidate credit account\\\");\\n\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!isMarketListed(gTokenBorrowed) || !isMarketListed(gTokenCollateral)) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (Error err, , uint256 shortfall) = getAccountLiquidityInternal(borrower);\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint256(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint256 borrowBalance = GToken(gTokenBorrowed).borrowBalanceStored(borrower);\\n        uint256 maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint256(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param gTokenBorrowed Asset which was borrowed by the borrower\\n     * @param gTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address gTokenBorrowed,\\n        address gTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 seizeTokens\\n    ) external {\\n        // Shh - currently unused\\n        gTokenBorrowed;\\n        gTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            closeFactorMantissa = closeFactorMantissa;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param gTokenCollateral Asset which was used as collateral and will be seized\\n     * @param gTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address gTokenCollateral,\\n        address gTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n        require(!isCreditAccount(borrower), \\\"cannot sieze from credit account\\\");\\n\\n        // Shh - currently unused\\n        liquidator;\\n        seizeTokens;\\n\\n        if (!isMarketListed(gTokenCollateral) || !isMarketListed(gTokenBorrowed)) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (GToken(gTokenCollateral).gTroller() != GToken(gTokenBorrowed).gTroller()) {\\n            return uint256(Error.JOETROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        RewardDistributor(rewardDistributor).updateAndDistributeSupplierRewardsForToken(gTokenCollateral, borrower);\\n        RewardDistributor(rewardDistributor).updateAndDistributeSupplierRewardsForToken(gTokenCollateral, liquidator);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param gTokenCollateral Asset which was used as collateral and will be seized\\n     * @param gTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address gTokenCollateral,\\n        address gTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external {\\n        // Shh - currently unused\\n        gTokenCollateral;\\n        gTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            closeFactorMantissa = closeFactorMantissa;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param gToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of gTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(\\n        address gToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n        require(!isCreditAccount(dst), \\\"cannot transfer to a credit account\\\");\\n\\n        // Shh - currently unused\\n        dst;\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint256 allowed = redeemAllowedInternal(gToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        RewardDistributor(rewardDistributor).updateAndDistributeSupplierRewardsForToken(gToken, src);\\n        RewardDistributor(rewardDistributor).updateAndDistributeSupplierRewardsForToken(gToken, dst);\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * @param gToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of gTokens to transfer\\n     */\\n    function transferVerify(\\n        address gToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external {\\n        // Shh - currently unused\\n        gToken;\\n        src;\\n        dst;\\n        transferTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            closeFactorMantissa = closeFactorMantissa;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param gToken The market to verify the transfer against\\n     * @param receiver The account which receives the tokens\\n     * @param amount The amount of the tokens\\n     * @param params The other parameters\\n     */\\n\\n    function flashloanAllowed(\\n        address gToken,\\n        address receiver,\\n        uint256 amount,\\n        bytes calldata params\\n    ) external view returns (bool) {\\n        return !flashloanGuardianPaused[gToken];\\n    }\\n\\n    /**\\n     * @notice Update GToken's version.\\n     * @param gToken Version of the asset being updated\\n     * @param newVersion The new version\\n     */\\n    function updateGTokenVersion(address gToken, Version newVersion) external {\\n        require(msg.sender == gToken, \\\"only gToken could update its version\\\");\\n\\n        // This function will be called when a new GToken implementation becomes active.\\n        // If a new GToken is newly created, this market is not listed yet. The version of\\n        // this market will be taken care of when calling `_supportMarket`.\\n        if (isMarketListed(gToken)) {\\n            Version oldVersion = markets[gToken].version;\\n            markets[gToken].version = newVersion;\\n\\n            emit NewGTokenVersion(GToken(gToken), oldVersion, newVersion);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the account is a credit account\\n     * @param account The account needs to be checked\\n     * @return The account is a credit account or not\\n     */\\n    function isCreditAccount(address account) public view returns (bool) {\\n        return creditLimits[account] > 0;\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `gTokenBalance` is the number of gTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint256 sumCollateral;\\n        uint256 sumBorrowPlusEffects;\\n        uint256 gTokenBalance;\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n        uint256 oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            account,\\n            GToken(0),\\n            0,\\n            0\\n        );\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account)\\n        internal\\n        view\\n        returns (\\n            Error,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return getHypotheticalAccountLiquidityInternal(account, GToken(0), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param gTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address gTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (Error err, uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n            account,\\n            GToken(gTokenModify),\\n            redeemTokens,\\n            borrowAmount\\n        );\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param gTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral gToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        GToken gTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            Error,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // If credit limit is set to MAX, no need to check account liquidity.\\n        if (creditLimits[account] == uint256(-1)) {\\n            return (Error.NO_ERROR, uint256(-1), 0);\\n        }\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint256 oErr;\\n\\n        // For each asset the account is in\\n        GToken[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            GToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the gToken\\n            (oErr, vars.gTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(\\n                account\\n            );\\n            if (oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n\\n            // Unlike joeound protocol, getUnderlyingPrice is relatively expensive because we use ChainLink as our primary price feed.\\n            // If user has no supply / borrow balance on this asset, and user is not redeeming / borrowing this asset, skip it.\\n            if (vars.gTokenBalance == 0 && vars.borrowBalance == 0 && asset != gTokenModify) {\\n                continue;\\n            }\\n\\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n            // sumCollateral += tokensToDenom * gTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.gTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n\\n            // Calculate effects of interacting with gTokenModify\\n            if (asset == gTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.tokensToDenom,\\n                    redeemTokens,\\n                    vars.sumBorrowPlusEffects\\n                );\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.oraclePrice,\\n                    borrowAmount,\\n                    vars.sumBorrowPlusEffects\\n                );\\n            }\\n        }\\n\\n        // If credit limit is set, no need to consider collateral.\\n        if (creditLimits[account] > 0) {\\n            vars.sumCollateral = creditLimits[account];\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in gToken.liquidateBorrowFresh)\\n     * @param gTokenBorrowed The address of the borrowed gToken\\n     * @param gTokenCollateral The address of the collateral gToken\\n     * @param actualRepayAmount The amount of gTokenBorrowed underlying to convert into gTokenCollateral tokens\\n     * @return (errorCode, number of gTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(\\n        address gTokenBorrowed,\\n        address gTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256, uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(GToken(gTokenBorrowed));\\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(GToken(gTokenCollateral));\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint256(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint256 exchangeRateMantissa = GToken(gTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        Exp memory numerator = mul_(\\n            Exp({mantissa: liquidationIncentiveMantissa}),\\n            Exp({mantissa: priceBorrowedMantissa})\\n        );\\n        Exp memory denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        Exp memory ratio = div_(numerator, denominator);\\n        uint256 seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint256(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    function _setRewardDistributor(address payable newRewardDistributor) public returns (uint256) {\\n        if (msg.sender != admin) {\\n          return uint256(Error.UNAUTHORIZED);\\n        }\\n        (bool success, ) = newRewardDistributor.call.value(0)(\\n                              abi.encodeWithSignature(\\\"initialize()\\\", 0)\\n                           );\\n        if (!success) {\\n          return uint256(Error.REJECTION);\\n        }\\n        \\n        address oldRewardDistributor = rewardDistributor;\\n        rewardDistributor = newRewardDistributor;\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n    /**\\n     * @notice Sets a new price oracle for the gTroller\\n     * @dev Admin function to set a new price oracle\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n        }\\n\\n        // Track the old oracle for the gTroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set gTroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Admin function to set closeFactor\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\n        }\\n\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the collateralFactor for a market\\n     * @dev Admin function to set per-market collateralFactor\\n     * @param gToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCollateralFactor(GToken gToken, uint256 newCollateralFactorMantissa) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(gToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(gToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(gToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets liquidationIncentive\\n     * @dev Admin function to set liquidationIncentive\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Save current value for use in log\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to set isListed and add support for the market\\n     * @param gToken The address of the market (token) to list\\n     * @param version The version of the market (token)\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportMarket(GToken gToken, Version version) external returns (uint256) {\\n        require(msg.sender == admin, \\\"only admin may support market\\\");\\n        require(!isMarketListed(address(gToken)), \\\"market already listed\\\");\\n\\n        gToken.isGToken(); // Sanity check to make sure its really a GToken\\n\\n        markets[address(gToken)] = Market({isListed: true, collateralFactorMantissa: 0, version: version});\\n\\n        _addMarketInternal(address(gToken));\\n\\n        emit MarketListed(gToken);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Remove the market from the markets mapping\\n     * @param gToken The address of the market (token) to delist\\n     */\\n    function _delistMarket(GToken gToken) external {\\n        require(msg.sender == admin, \\\"only admin may delist market\\\");\\n        require(isMarketListed(address(gToken)), \\\"market not listed\\\");\\n        require(gToken.totalSupply() == 0, \\\"market not empty\\\");\\n\\n        gToken.isGToken(); // Sanity check to make sure its really a GToken\\n\\n        delete markets[address(gToken)];\\n\\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            if (allMarkets[i] == gToken) {\\n                allMarkets[i] = allMarkets[allMarkets.length - 1];\\n                delete allMarkets[allMarkets.length - 1];\\n                allMarkets.length--;\\n                break;\\n            }\\n        }\\n\\n        emit MarketDelisted(gToken);\\n    }\\n\\n    function _addMarketInternal(address gToken) internal {\\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            require(allMarkets[i] != GToken(gToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(GToken(gToken));\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Supply Cap Guardian\\n     * @param newSupplyCapGuardian The address of the new Supply Cap Guardian\\n     */\\n    function _setSupplyCapGuardian(address newSupplyCapGuardian) external {\\n        require(msg.sender == admin, \\\"only admin can set supply cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldSupplyCapGuardian = supplyCapGuardian;\\n\\n        // Store supplyCapGuardian with value newSupplyCapGuardian\\n        supplyCapGuardian = newSupplyCapGuardian;\\n\\n        // Emit NewSupplyCapGuardian(OldSupplyCapGuardian, NewSupplyCapGuardian)\\n        emit NewSupplyCapGuardian(oldSupplyCapGuardian, newSupplyCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Set the given supply caps for the given gToken markets. Supplying that brings total supplys to or above supply cap will revert.\\n     * @dev Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying. If the total borrows\\n     *      already exceeded the cap, it will prevent anyone to borrow.\\n     * @param gTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n     */\\n    function _setMarketSupplyCaps(GToken[] calldata gTokens, uint256[] calldata newSupplyCaps) external {\\n        require(\\n            msg.sender == admin || msg.sender == supplyCapGuardian,\\n            \\\"only admin or supply cap guardian can set supply caps\\\"\\n        );\\n\\n        uint256 numMarkets = gTokens.length;\\n        uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"invalid input\\\");\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            supplyCaps[address(gTokens[i])] = newSupplyCaps[i];\\n            emit NewSupplyCap(gTokens[i], newSupplyCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given gToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing. If the total supplies\\n     *      already exceeded the cap, it will prevent anyone to mint.\\n     * @param gTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function _setMarketBorrowCaps(GToken[] calldata gTokens, uint256[] calldata newBorrowCaps) external {\\n        require(\\n            msg.sender == admin || msg.sender == borrowCapGuardian,\\n            \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n        );\\n\\n        uint256 numMarkets = gTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(gTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(gTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(GToken gToken, bool state) public returns (bool) {\\n        require(isMarketListed(address(gToken)), \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(gToken)] = state;\\n        emit ActionPaused(gToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(GToken gToken, bool state) public returns (bool) {\\n        require(isMarketListed(address(gToken)), \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(gToken)] = state;\\n        emit ActionPaused(gToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setFlashloanPaused(GToken gToken, bool state) public returns (bool) {\\n        require(isMarketListed(address(gToken)), \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        flashloanGuardianPaused[address(gToken)] = state;\\n        emit ActionPaused(gToken, \\\"Flashloan\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(Unitroller unitroller) public {\\n        require(msg.sender == unitroller.admin(), \\\"only unitroller admin can change brains\\\");\\n        require(unitroller._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    /**\\n     * @notice Sets whitelisted protocol's credit limit\\n     * @param protocol The address of the protocol\\n     * @param creditLimit The credit limit\\n     */\\n    function _setCreditLimit(address protocol, uint256 creditLimit) public {\\n        require(msg.sender == admin, \\\"only admin can set protocol credit limit\\\");\\n\\n        creditLimits[protocol] = creditLimit;\\n        emit CreditLimitChanged(protocol, creditLimit);\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == gTrollerImplementation;\\n    }\\n\\n\\n    /*** Reward distribution functions ***/\\n\\n    /**\\n     * @notice Claim all the JOE/AVAX accrued by holder in all markets\\n     * @param holder The address to claim JOE/AVAX for\\n     */\\n    function claimReward(uint8 rewardType, address payable holder) public {\\n       RewardDistributor(rewardDistributor).claimReward(rewardType, holder);\\n    }\\n\\n    /**\\n     * @notice Claim all the JOE/AVAX accrued by holder in the specified markets\\n     * @param holder The address to claim JOE/AVAX for\\n     * @param gTokens The list of markets to claim JOE/AVAX in\\n     */\\n    function claimReward(uint8 rewardType, address payable holder, GToken[] memory gTokens) public {\\n        RewardDistributor(rewardDistributor).claimReward(rewardType, holder, gTokens);\\n    }\\n\\n    /**\\n     * @notice Claim all JOE/AVAX  accrued by the holders\\n     * @param rewardType  0 = JOE, 1 = AVAX\\n     * @param holders The addresses to claim JOE/AVAX for\\n     * @param gTokens The list of markets to claim JOE/AVAX in\\n     * @param borrowers Whether or not to claim JOE/AVAX earned by borrowing\\n     * @param suppliers Whether or not to claim JOE/AVAX earned by supplying\\n     */\\n    function claimReward(uint8 rewardType, address payable[] memory holders, GToken[] memory gTokens, bool borrowers, bool suppliers) public payable {\\n        RewardDistributor(rewardDistributor).claimReward(rewardType, holders, gTokens, borrowers, suppliers);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8ec8fd3918308ca26fa5b47943e6c89120b7cabcf64a850b6c3e0a3cd2033c3c\"},\"contracts/GtrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./GToken.sol\\\";\\nimport \\\"./GtrollerStorage.sol\\\";\\n\\ncontract GtrollerInterface {\\n    /// @notice Indicator that this is a Gtroller contract (for inspection)\\n    bool public constant isGtroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata gTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address gToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address gToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address gToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address gToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address gToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address gToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address gToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address gToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address gToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address gTokenBorrowed,\\n        address gTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address gTokenBorrowed,\\n        address gTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address gTokenCollateral,\\n        address gTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address gTokenCollateral,\\n        address gTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address gToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address gToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address gTokenBorrowed,\\n        address gTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n}\\n\\ninterface GtrollerInterfaceExtension {\\n    function checkMembership(address account, GToken gToken) external view returns (bool);\\n\\n    function updateGTokenVersion(address gToken, GtrollerV1Storage.Version version) external;\\n\\n    function flashloanAllowed(\\n        address gToken,\\n        address receiver,\\n        uint256 amount,\\n        bytes calldata params\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x769609bb58ce98c42d1101190778e5c4b71eba8386f56e0b31c218c9b4d40d6e\"},\"contracts/GtrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./GToken.sol\\\";\\nimport \\\"./PriceOracle/PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public gTrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingGtrollerImplementation;\\n}\\n\\ncontract GtrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\"\\n     */\\n    mapping(address => GToken[]) public accountAssets;\\n\\n    enum Version {\\n        VANILLA,\\n        COLLATERALCAP,\\n        WRAPPEDNATIVE\\n    }\\n\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        /// @notice GToken version\\n        Version version;\\n    }\\n\\n    /**\\n     * @notice Official mapping of gTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n\\n    /// @notice A list of all markets\\n    GToken[] public allMarkets;\\n\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each gToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n\\n    // @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n    address public supplyCapGuardian;\\n\\n    // @notice Supply caps enforced by mintAllowed for each gToken address. Defaults to zero which corresponds to unlimited supplying.\\n    mapping(address => uint256) public supplyCaps;\\n\\n    // @notice creditLimits allowed specific protocols to borrow and repay without collateral.\\n    mapping(address => uint256) public creditLimits;\\n\\n    // @notice flashloanGuardianPaused can pause flash loan as a safety mechanism.\\n    mapping(address => bool) public flashloanGuardianPaused;\\n\\n    // @notice rewardDistributor The module that handles reward distribution.\\n    address payable public rewardDistributor;\\n}\\n\",\"keccak256\":\"0x2f8fe9b67fa6290813a9904888622d19e7772a9366d4f1d8c96252ac047b8f39\"},\"contracts/PriceOracle/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"../GToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /**\\n     * @notice Get the underlying price of a gToken asset\\n     * @param gToken The gToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(GToken gToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa6007c9a8daf4fe66121b677d8bb75ba995977d664673fd72367f50460d8b99f\"},\"contracts/RewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport './EIP20Interface.sol';\\nimport './Gtroller.sol';\\nimport './GToken.sol';\\n\\n\\ncontract RewardDistributorStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    Gtroller public gTroller;\\n\\n    struct RewardMarketState {\\n        /// @notice The market's last updated joeBorrowIndex or joeSupplyIndex\\n        uint224 index;\\n        /// @notice The timestamp number the index was last updated at\\n        uint32 timestamp;\\n    }\\n\\n    /// @notice The portion of reward rate that each market currently receives\\n    mapping(uint8 => mapping(address => uint256)) public rewardSpeeds;\\n\\n    /// @notice The JOE/AVAX market supply state for each market\\n    mapping(uint8 => mapping(address => RewardMarketState)) public rewardSupplyState;\\n\\n    /// @notice The JOE/AVAX market borrow state for each market\\n    mapping(uint8 => mapping(address => RewardMarketState)) public rewardBorrowState;\\n\\n    /// @notice The JOE/AVAX borrow index for each market for each supplier as of the last time they accrued reward \\n    mapping(uint8 => mapping(address => mapping(address => uint256))) public rewardSupplierIndex;\\n\\n    /// @notice The JOE/AVAX borrow index for each market for each borrower as of the last time they accrued reward\\n    mapping(uint8 => mapping(address => mapping(address => uint256))) public rewardBorrowerIndex;\\n\\n    /// @notice The JOE/AVAX accrued but not yet transferred to each user\\n    mapping(uint8 => mapping(address => uint256)) public rewardAccrued;\\n\\n    /// @notice The initial reward index for a market\\n    uint224 public constant rewardInitialIndex = 1e36;\\n\\n    /// @notice JOE token contract address\\n    address public joeAddress;\\n}\\n\\ncontract RewardDistributor is RewardDistributorStorage, Exponential {\\n\\n    /// @notice Emitted when a new reward speed is calculated for a market\\n    event RewardSpeedUpdated(uint8 rewardType, GToken indexed gToken, uint newSpeed);\\n\\n    /// @notice Emitted when JOE/AVAX is distributed to a supplier\\n    event DistributedSupplierReward(uint8 rewardType, GToken indexed gToken, address indexed supplier, uint rewardDelta, uint rewardSupplyIndex);\\n\\n    /// @notice Emitted when JOE/AVAX is distributed to a borrower\\n    event DistributedBorrowerReward(uint8 rewardType, GToken indexed gToken, address indexed borrower, uint rewardDelta, uint rewardBorrowIndex);\\n\\n    /// @notice Emitted when JOE is granted by admin\\n    event JoeGranted(address recipient, uint amount);\\n\\n    bool private initialized;\\n\\n    constructor() public {\\n      admin = msg.sender;\\n    }\\n\\n    function initialize() public {\\n      require(!initialized, \\\"RewardDistributor already initialized\\\");\\n      gTroller = Gtroller(msg.sender);\\n      initialized = true;\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == address(gTroller);\\n    }\\n\\n    /**\\n     * @notice Set JOE/AVAX speed for a single market\\n     * @param rewardType 0 = QI, 1 = AVAX\\n     * @param gToken The market whose reward speed to update\\n     * @param rewardSpeed New reward speed for market\\n     */\\n    function _setRewardSpeed(uint8 rewardType, GToken gToken, uint rewardSpeed) public {\\n        require(rewardType <= 1, \\\"rewardType is invalid\\\"); \\n        require(adminOrInitializing(), \\\"only admin can set reward speed\\\");\\n        setRewardSpeedInternal(rewardType, gToken, rewardSpeed);\\n    }\\n\\n    /**\\n     * @notice Set JOE/AVAX speed for a single market\\n     * @param rewardType  0: JOE, 1: AVAX \\n     * @param gToken The market whose speed to update\\n     * @param newSpeed New JOE or AVAX speed for market\\n     */\\n    function setRewardSpeedInternal(uint8 rewardType, GToken gToken, uint newSpeed) internal {\\n        uint currentRewardSpeed = rewardSpeeds[rewardType][address(gToken)];\\n        if (currentRewardSpeed != 0) {\\n            // note that JOE speed could be set to 0 to halt liquidity rewards for a market\\n            Exp memory borrowIndex = Exp({mantissa: gToken.borrowIndex()});\\n            updateRewardSupplyIndex(rewardType, address(gToken));\\n            updateRewardBorrowIndex(rewardType, address(gToken), borrowIndex);\\n        } else if (newSpeed != 0) {\\n            // Add the JOE market\\n            \\n            require(gTroller.isMarketListed(address(gToken)), \\\"reward market is not listed\\\");\\n\\n            if (rewardSupplyState[rewardType][address(gToken)].index == 0 &&\\n                rewardSupplyState[rewardType][address(gToken)].timestamp == 0) {\\n                rewardSupplyState[rewardType][address(gToken)] = RewardMarketState({\\n                    index: rewardInitialIndex,\\n                    timestamp: safe32(getBlockTimestamp(), \\\"block timestamp exceeds 32 bits\\\")\\n                });\\n            }\\n\\n            if (rewardBorrowState[rewardType][address(gToken)].index == 0 &&\\n                rewardBorrowState[rewardType][address(gToken)].timestamp == 0) {\\n                rewardBorrowState[rewardType][address(gToken)] = RewardMarketState({\\n                    index: rewardInitialIndex,\\n                    timestamp: safe32(getBlockTimestamp(), \\\"block timestamp exceeds 32 bits\\\")\\n                });\\n            }\\n        }\\n\\n        if (currentRewardSpeed != newSpeed) {\\n            rewardSpeeds[rewardType][address(gToken)] = newSpeed;\\n            emit RewardSpeedUpdated(rewardType, gToken, newSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue JOE/AVAX to the market by updating the supply index\\n     * @param rewardType  0: JOE, 1: AVAX \\n     * @param gToken The market whose supply index to update\\n     */\\n    function updateRewardSupplyIndex(uint8 rewardType, address gToken) internal {\\n        require(rewardType <= 1, \\\"rewardType is invalid\\\"); \\n        RewardMarketState storage supplyState = rewardSupplyState[rewardType][gToken];\\n        uint supplySpeed = rewardSpeeds[rewardType][gToken];\\n        uint blockTimestamp = getBlockTimestamp();\\n        uint deltaTimestamps = sub_(blockTimestamp, uint(supplyState.timestamp));\\n        if (deltaTimestamps > 0 && supplySpeed > 0) {\\n            uint supplyTokens = GToken(gToken).totalSupply();\\n            uint rewardAccrued = mul_(deltaTimestamps, supplySpeed);\\n            Double memory ratio = supplyTokens > 0 ? fraction(rewardAccrued, supplyTokens) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\n            rewardSupplyState[rewardType][gToken] = RewardMarketState({\\n                index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n                timestamp: safe32(blockTimestamp, \\\"block timestamp exceeds 32 bits\\\")\\n            });\\n        } else if (deltaTimestamps > 0) {\\n            supplyState.timestamp = safe32(blockTimestamp, \\\"block timestamp exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue JOE/AVAX to the market by updating the borrow index\\n     * @param rewardType  0: JOE, 1: AVAX \\n     * @param gToken The market whose borrow index to update\\n     */\\n    function updateRewardBorrowIndex(uint8 rewardType, address gToken, Exp memory marketBorrowIndex) internal {\\n        require(rewardType <= 1, \\\"rewardType is invalid\\\"); \\n        RewardMarketState storage borrowState = rewardBorrowState[rewardType][gToken];\\n        uint borrowSpeed = rewardSpeeds[rewardType][gToken];\\n        uint blockTimestamp = getBlockTimestamp();\\n        uint deltaTimestamps = sub_(blockTimestamp, uint(borrowState.timestamp));\\n        if (deltaTimestamps > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(GToken(gToken).totalBorrows(), marketBorrowIndex);\\n            uint rewardAccrued = mul_(deltaTimestamps, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0 ? fraction(rewardAccrued, borrowAmount) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\n            rewardBorrowState[rewardType][gToken] = RewardMarketState({\\n                index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n                timestamp: safe32(blockTimestamp, \\\"block timestamp exceeds 32 bits\\\")\\n            });\\n        } else if (deltaTimestamps > 0) {\\n            borrowState.timestamp = safe32(blockTimestamp, \\\"block timestamp exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate JOE/AVAX accrued by a supplier and possibly transfer it to them\\n     * @param rewardType  0: JOE, 1: AVAX \\n     * @param gToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute JOE/AVAX to\\n     */\\n    function distributeSupplierReward(uint8 rewardType, address gToken, address supplier) internal {\\n        require(rewardType <= 1, \\\"rewardType is invalid\\\"); \\n        RewardMarketState storage supplyState = rewardSupplyState[rewardType][gToken];\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\n        Double memory supplierIndex = Double({mantissa:\\n                                             rewardSupplierIndex[rewardType][gToken][supplier]});\\n        rewardSupplierIndex[rewardType][gToken][supplier] = supplyIndex.mantissa;\\n\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = rewardInitialIndex;\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint supplierTokens = GToken(gToken).balanceOf(supplier);\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n        uint supplierAccrued = add_(rewardAccrued[rewardType][supplier], supplierDelta);\\n        rewardAccrued[rewardType][supplier] = supplierAccrued;\\n        emit DistributedSupplierReward(rewardType, GToken(gToken), supplier, supplierDelta, supplyIndex.mantissa);\\n    }\\n\\n    /**\\n     * @notice Calculate JOE/AVAX accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param rewardType  0: JOE, 1: AVAX \\n     * @param gToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute JOE/AVAX to\\n     */\\n    function distributeBorrowerReward(uint8 rewardType, address gToken, address borrower, Exp memory marketBorrowIndex) internal {\\n        require(rewardType <= 1, \\\"rewardType is invalid\\\"); \\n        RewardMarketState storage borrowState = rewardBorrowState[rewardType][gToken];\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\n        Double memory borrowerIndex = Double({mantissa:\\n                                             rewardBorrowerIndex[rewardType][gToken][borrower]});\\n        rewardBorrowerIndex[rewardType][gToken][borrower] = borrowIndex.mantissa;\\n\\n        if (borrowerIndex.mantissa > 0) {\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n            uint borrowerAmount = div_(GToken(gToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n            uint borrowerAccrued = add_(rewardAccrued[rewardType][borrower], borrowerDelta);\\n            rewardAccrued[rewardType][borrower] = borrowerAccrued;\\n            emit DistributedBorrowerReward(rewardType, GToken(gToken), borrower, borrowerDelta, borrowIndex.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Refactored function to calc and rewards accounts supplier rewards\\n     * @param gToken The market to verify the mint against\\n     * @param supplier The supplier to be rewarded\\n     */\\n    function updateAndDistributeSupplierRewardsForToken(address gToken, address supplier) external {\\n        require(adminOrInitializing(), \\\"only admin can update and distribute supplier rewards\\\");\\n        for (uint8 rewardType = 0; rewardType <= 1; rewardType++) {\\n            updateRewardSupplyIndex(rewardType, gToken);\\n            distributeSupplierReward(rewardType, gToken, supplier);\\n        }\\n    }\\n\\n   /**\\n     * @notice Refactored function to calc and rewards accounts supplier rewards\\n     * @param gToken The market to verify the mint against\\n     * @param borrower Borrower to be rewarded\\n     */\\n    function updateAndDistributeBorrowerRewardsForToken(address gToken, address borrower, Exp calldata marketBorrowIndex)\\n    external {\\n        require(adminOrInitializing(), \\\"only admin can update and distribute borrower rewards\\\");\\n        for (uint8 rewardType = 0; rewardType <= 1; rewardType++) {\\n            updateRewardBorrowIndex(rewardType, gToken, marketBorrowIndex);\\n            distributeBorrowerReward(rewardType, gToken, borrower, marketBorrowIndex);\\n        }\\n    }\\n\\n    /*** User functions ***/\\n\\n    /**\\n     * @notice Claim all the JOE/AVAX accrued by holder in all markets\\n     * @param holder The address to claim JOE/AVAX for\\n     */\\n    function claimReward(uint8 rewardType, address payable holder) public {\\n        return claimReward(rewardType, holder, gTroller.getAllMarkets());\\n    }\\n\\n    /**\\n     * @notice Claim all the JOE/AVAX accrued by holder in the specified markets\\n     * @param holder The address to claim JOE/AVAX for\\n     * @param gTokens The list of markets to claim JOE/AVAX in\\n     */\\n    function claimReward(uint8 rewardType, address payable holder, GToken[] memory gTokens) public {\\n        address payable [] memory holders = new address payable[](1);\\n        holders[0] = holder;\\n        claimReward(rewardType, holders, gTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all JOE/AVAX  accrued by the holders\\n     * @param rewardType  0 = JOE, 1 = AVAX\\n     * @param holders The addresses to claim JOE/AVAX for\\n     * @param gTokens The list of markets to claim JOE/AVAX in\\n     * @param borrowers Whether or not to claim JOE/AVAX earned by borrowing\\n     * @param suppliers Whether or not to claim JOE/AVAX earned by supplying\\n     */\\n    function claimReward(uint8 rewardType, address payable[] memory holders, GToken[] memory gTokens, bool borrowers, bool suppliers) public payable {\\n        require(rewardType <= 1, \\\"rewardType is invalid\\\");\\n        for (uint i = 0; i < gTokens.length; i++) {\\n            GToken gToken = gTokens[i];\\n            require(gTroller.isMarketListed(address(gToken)), \\\"market must be listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: gToken.borrowIndex()});\\n                updateRewardBorrowIndex(rewardType, address(gToken), borrowIndex);\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeBorrowerReward(rewardType, address(gToken), holders[j], borrowIndex);\\n                    rewardAccrued[rewardType][holders[j]] = grantRewardInternal(rewardType, holders[j], rewardAccrued[rewardType][holders[j]]);\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateRewardSupplyIndex(rewardType, address(gToken));\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeSupplierReward(rewardType, address(gToken), holders[j]);\\n                    rewardAccrued[rewardType][holders[j]] = grantRewardInternal(rewardType, holders[j], rewardAccrued[rewardType][holders[j]]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer JOE/AVAX to the user\\n     * @dev Note: If there is not enough JOE/AVAX, we do not perform the transfer all.\\n     * @param user The address of the user to transfer JOE/AVAX to\\n     * @param amount The amount of JOE/AVAX to (possibly) transfer\\n     * @return The amount of JOE/AVAX which was NOT transferred to the user\\n     */\\n    function grantRewardInternal(uint rewardType, address payable user, uint amount) internal returns (uint) {\\n        if (rewardType == 0) {\\n            EIP20Interface joe = EIP20Interface(joeAddress);\\n            uint joeRemaining = joe.balanceOf(address(this));\\n            if (amount > 0 && amount <= joeRemaining) {\\n                joe.transfer(user, amount);\\n                return 0;\\n            }\\n        } else if (rewardType == 1) {\\n            uint avaxRemaining = address(this).balance;\\n            if (amount > 0 && amount <= avaxRemaining) {\\n                user.transfer(amount);\\n                return 0;\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    /*** Joe Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer JOE to the recipient\\n     * @dev Note: If there is not enough JOE, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer JOE to\\n     * @param amount The amount of JOE to (possibly) transfer\\n     */\\n    function _grantJoe(address payable recipient, uint amount) public {\\n        require(adminOrInitializing(), \\\"only admin can grant joe\\\");\\n        uint amountLeft = grantRewardInternal(0, recipient, amount);\\n        require(amountLeft == 0, \\\"insufficient joe for grant\\\");\\n        emit JoeGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Set the JOE token address\\n     */\\n    function setJoeAddress(address newJoeAddress) public {\\n        require(msg.sender == admin);\\n        joeAddress = newJoeAddress;\\n    }\\n    \\n    /**\\n     * @notice Set the Gtroller address\\n     */\\n    function setGtroller(address _gTroller) public {\\n        require(msg.sender == admin);\\n        gTroller = Gtroller(_gTroller);\\n    }\\n\\n    /**\\n     * @notice Set the admin\\n     */\\n    function setAdmin(address _newAdmin) public {\\n      require(msg.sender == admin);\\n      admin = _newAdmin;\\n    }\\n\\n    /**\\n     * @notice payable function needed to receive AVAX\\n     */\\n    function () payable external {\\n    }\\n\\n    function getBlockTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xb1cdf908500005c14b863ac54518081999b449c2e3cc19962c6a5f8e303ca9a3\"},\"contracts/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./GtrollerStorage.sol\\\";\\n\\n/**\\n * @title GtrollerCore\\n * @dev Storage for the gTroller is at this address, while execution is delegated to the `gTrollerImplementation`.\\n * GTokens should reference this contract as their gTroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, GtrollerErrorReporter {\\n    /**\\n     * @notice Emitted when pendingGtrollerImplementation is changed\\n     */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n     * @notice Emitted when pendingGtrollerImplementation is accepted, which means gTroller implementation is updated\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint256) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n\\n        address oldPendingImplementation = pendingGtrollerImplementation;\\n\\n        pendingGtrollerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingGtrollerImplementation);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation of gTroller. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptImplementation() public returns (uint256) {\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        if (msg.sender != pendingGtrollerImplementation || pendingGtrollerImplementation == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = gTrollerImplementation;\\n        address oldPendingImplementation = pendingGtrollerImplementation;\\n\\n        gTrollerImplementation = pendingGtrollerImplementation;\\n\\n        pendingGtrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, gTrollerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingGtrollerImplementation);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() public returns (uint256) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function() external payable {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = gTrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n            switch success\\n            case 0 {\\n                revert(free_mem_ptr, returndatasize)\\n            }\\n            default {\\n                return(free_mem_ptr, returndatasize)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x832546ad1e3e2dc0b61ad3aa855a63ef2973c6b7a62262284d22d02b8d41a048\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556129c7806100326000396000f3fe6080604052600436106101355760003560e01c80637937969d116100ab5780639c39e2931161006f5780639c39e2931461033c578063cb15d8e21461035c578063d81c5e451461037e578063f06639831461039e578063f851a440146103be578063fcc4cfd1146103d357610135565b80637937969d146102bf578063796b89b9146102df5780638129fc1c146102f45780638805714b1461030957806388e972b81461031c57610135565b80634b3a0a74116100fd5780634b3a0a74146101ed5780636330533c1461021b57806366f91a241461023d578063670e8afd1461025f578063704b6c021461027f578063744532ae1461029f57610135565b806305b9783d146101375780630952c5631461016d5780631f9f35111461018d5780632b7e3434146101ad57806333fccb4a146101cd575b005b34801561014357600080fd5b5061015761015236600461229e565b6103f3565b604051610164919061280a565b60405180910390f35b34801561017957600080fd5b5061013561018836600461229e565b610410565b34801561019957600080fd5b506101356101a8366004612132565b6104a3565b3480156101b957600080fd5b506101576101c836600461229e565b6104dc565b3480156101d957600080fd5b506101356101e8366004612158565b6104f9565b3480156101f957600080fd5b5061020d61020836600461229e565b610592565b6040516101649291906127ef565b34801561022757600080fd5b506102306105c7565b6040516101649190612732565b34801561024957600080fd5b506102526105d6565b60405161016491906127e1565b34801561026b57600080fd5b5061013561027a366004612192565b6105e9565b34801561028b57600080fd5b5061013561029a366004612132565b61063d565b3480156102ab57600080fd5b506101356102ba3660046122bd565b610676565b3480156102cb57600080fd5b506101576102da366004612318565b6106da565b3480156102eb57600080fd5b506101576106fd565b34801561030057600080fd5b50610135610701565b61013561031736600461235b565b610752565b34801561032857600080fd5b50610157610337366004612318565b610aa6565b34801561034857600080fd5b506101356103573660046121c2565b610ac9565b34801561036857600080fd5b50610371610b36565b60405161016491906126fb565b34801561038a57600080fd5b5061020d61039936600461229e565b610b45565b3480156103aa57600080fd5b506101356103b9366004612400565b610b7a565b3480156103ca57600080fd5b50610371610bcd565b3480156103df57600080fd5b506101356103ee366004612132565b610bdc565b600760209081526000928352604080842090915290825290205481565b61049f8282600160009054906101000a90046001600160a01b03166001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ba919081019061220f565b5050565b6000546001600160a01b031633146104ba57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600260209081526000928352604080842090915290825290205481565b610501610c15565b6105265760405162461bcd60e51b815260040161051d90612781565b60405180910390fd5b600061053460008484610c3e565b905080156105545760405162461bcd60e51b815260040161051d906127b1565b7fb1df3cbf74dc2e3d8fdb5b5b2d6f752f79d2591a8978b01124135795c8b18d288383604051610585929190612717565b60405180910390a1505050565b60046020908152600092835260408084209091529082529020546001600160e01b03811690600160e01b900463ffffffff1682565b6001546001600160a01b031681565b6ec097ce7bc90715b34b9f100000000081565b6105f1610c15565b61060d5760405162461bcd60e51b815260040161051d90612791565b60005b60018160ff1611610638576106258184610ddf565b6106308184846110b0565b600101610610565b505050565b6000546001600160a01b0316331461065457600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160018082528183019092526060916020808301908038833901905050905082816000815181106106a657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506106d4848284600180610752565b50505050565b600660209081526000938452604080852082529284528284209052825290205481565b4290565b600854600160a01b900460ff161561072b5760405162461bcd60e51b815260040161051d906127c1565b600180546001600160a01b031916331790556008805460ff60a01b1916600160a01b179055565b60018560ff1611156107765760405162461bcd60e51b815260040161051d906127a1565b60005b8351811015610a9e57600084828151811061079057fe5b6020908102919091010151600154604051633d98a1e560e01b81529192506001600160a01b031690633d98a1e5906107cc9084906004016126fb565b60206040518083038186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061081c9190810190612244565b6108385760405162461bcd60e51b815260040161051d90612771565b600184151514156109c35761084b611f1d565b6040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108c79190810190612280565b905290506108d68883836112ea565b60005b87518110156109c05761090189848a84815181106108f357fe5b6020026020010151856115fc565b6109718960ff1689838151811061091457fe5b6020026020010151600760008d60ff1660ff16815260200190815260200160002060008c868151811061094357fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054610c3e565b60ff8a1660009081526007602052604081208a519091908b908590811061099457fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016108d9565b50505b60018315151415610a95576109d88782610ddf565b60005b8651811015610a9357610a0288838984815181106109f557fe5b60200260200101516110b0565b610a448860ff16888381518110610a1557fe5b6020026020010151600760008c60ff1660ff16815260200190815260200160002060008b868151811061094357fe5b60ff8916600090815260076020526040812089519091908a9085908110610a6757fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016109db565b505b50600101610779565b505050505050565b600560209081526000938452604080852082529284528284209052825290205481565b610ad1610c15565b610aed5760405162461bcd60e51b815260040161051d90612751565b60005b60018160ff16116106d457610b148185610b0f36869003860186612262565b6112ea565b610b2e818585610b2936879003870187612262565b6115fc565b600101610af0565b6008546001600160a01b031681565b60036020908152600092835260408084209091529082529020546001600160e01b03811690600160e01b900463ffffffff1682565b60018360ff161115610b9e5760405162461bcd60e51b815260040161051d906127a1565b610ba6610c15565b610bc25760405162461bcd60e51b815260040161051d906127d1565b610638838383611805565b6000546001600160a01b031681565b6000546001600160a01b03163314610bf357600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b0316331480610c3957506001546001600160a01b031633145b905090565b600083610d74576008546040516370a0823160e01b81526001600160a01b039091169060009082906370a0823190610c7a903090600401612709565b60206040518083038186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cca9190810190612280565b9050600084118015610cdc5750808411155b15610d6d5760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610d0f9088908890600401612717565b602060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d619190810190612244565b50600092505050610dd8565b5050610dd5565b8360011415610dd557478215801590610d8d5750808311155b15610dd3576040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015610dc8573d6000803e3d6000fd5b506000915050610dd8565b505b50805b9392505050565b60018260ff161115610e035760405162461bcd60e51b815260040161051d906127a1565b60ff821660008181526003602090815260408083206001600160a01b0386168085529083528184209484526002835281842090845290915281205490610e476106fd565b8354909150600090610e67908390600160e01b900463ffffffff16611c2b565b9050600081118015610e795750600083115b15611056576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ef19190810190612280565b90506000610eff8386611c6e565b9050610f09611f1d565b60008311610f265760405180602001604052806000815250610f30565b610f308284611cb0565b9050610f3a611f1d565b604080516020810190915288546001600160e01b03168152610f5c9083611cee565b90506040518060400160405280610fac83600001516040518060400160405280601a81526020017f6e657720696e6465782065786365656473203232342062697473000000000000815250611d13565b6001600160e01b03168152602001610fe7886040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b63ffffffff90811690915260ff8c1660009081526003602090815260408083206001600160a01b038f1684528252909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b0319909416939093171691909117905550610a9e92505050565b8015610a9e57611089826040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b60018360ff1611156110d45760405162461bcd60e51b815260040161051d906127a1565b60ff831660009081526003602090815260408083206001600160a01b03861684529091529020611102611f1d565b50604080516020810190915281546001600160e01b03168152611123611f1d565b50604080516020808201835260ff88166000908152600582528381206001600160a01b03808a1683529083528482209088168083528184529482208054855286519590925290915291909155805115801561117e5750815115155b15611196576ec097ce7bc90715b34b9f100000000081525b61119e611f1d565b6111a88383611d6a565b90506000866001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016111d891906126fb565b60206040518083038186803b1580156111f057600080fd5b505afa158015611204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112289190810190612280565b905060006112368284611d8f565b60ff8a1660009081526007602090815260408083206001600160a01b038c1684529091528120549192509061126b9083611dbe565b60ff8b1660009081526007602090815260408083206001600160a01b03808e168086529190935292819020849055895190519394509192908c16917faccd035d02c456be35306aecd5a5fe62320713dde09ccd68b0a5e8ed93039999916112d6918f91889190612826565b60405180910390a350505050505050505050565b60018360ff16111561130e5760405162461bcd60e51b815260040161051d906127a1565b60ff831660008181526004602090815260408083206001600160a01b03871680855290835281842094845260028352818420908452909152812054906113526106fd565b8354909150600090611372908390600160e01b900463ffffffff16611c2b565b90506000811180156113845750600083115b156115a0576000611405876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ff9190810190612280565b87611df4565b905060006114138386611c6e565b905061141d611f1d565b6000831161143a5760405180602001604052806000815250611444565b6114448284611cb0565b905061144e611f1d565b604080516020810190915288546001600160e01b031681526114709083611cee565b905060405180604001604052806114c083600001516040518060400160405280601a81526020017f6e657720696e6465782065786365656473203232342062697473000000000000815250611d13565b6001600160e01b031681526020016114fb886040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b63ffffffff16815250600460008d60ff1660ff16815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160e01b0302191690836001600160e01b03160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050505050506115f3565b80156115f3576115d3826040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b845463ffffffff91909116600160e01b026001600160e01b039091161784555b50505050505050565b60018460ff1611156116205760405162461bcd60e51b815260040161051d906127a1565b60ff841660009081526004602090815260408083206001600160a01b0387168452909152902061164e611f1d565b50604080516020810190915281546001600160e01b0316815261166f611f1d565b50604080516020808201835260ff89166000908152600682528381206001600160a01b03808b16835290835284822090891680835281845294822080548552865195909252909152919091558051156115f3576116ca611f1d565b6116d48383611d6a565b9050600061171f886001600160a01b03166395dd9193896040518263ffffffff1660e01b815260040161170791906126fb565b60206040518083038186803b1580156113c757600080fd5b9050600061172d8284611d8f565b60ff8b1660009081526007602090815260408083206001600160a01b038d168452909152812054919250906117629083611dbe565b905080600760008d60ff1660ff16815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002081905550886001600160a01b03168a6001600160a01b03167fa1b6a046664a0ecf068059f26de56878f8d0e799907ca2e42d9148ccbdc717a78d858a600001516040516117f093929190612826565b60405180910390a35050505050505050505050565b60ff831660009081526002602090815260408083206001600160a01b038616845290915290205480156118d55761183a611f1d565b6040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561187e57600080fd5b505afa158015611892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118b69190810190612280565b905290506118c48585610ddf565b6118cf8585836112ea565b50611bba565b8115611bba57600154604051633d98a1e560e01b81526001600160a01b0390911690633d98a1e59061190b9086906004016126fb565b60206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061195b9190810190612244565b6119775760405162461bcd60e51b815260040161051d90612761565b60ff841660009081526003602090815260408083206001600160a01b03871684529091529020546001600160e01b03161580156119e5575060ff841660009081526003602090815260408083206001600160a01b0387168452909152902054600160e01b900463ffffffff16155b15611aad5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b03168152602001611a47611a1e6106fd565b6040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b63ffffffff90811690915260ff861660009081526003602090815260408083206001600160a01b03891684528252909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b60ff841660009081526004602090815260408083206001600160a01b03871684529091529020546001600160e01b0316158015611b1b575060ff841660009081526004602090815260408083206001600160a01b0387168452909152902054600160e01b900463ffffffff16155b15611bba5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b03168152602001611b54611a1e6106fd565b63ffffffff90811690915260ff861660009081526004602090815260408083206001600160a01b03891684528252909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b8181146106d45760ff841660009081526002602090815260408083206001600160a01b03871680855292529182902084905590517fbcd6f688f6b32a7abece90e35e19187f0d25af4d6661fe99791a3b69a2defded90611c1d9087908690612818565b60405180910390a250505050565b6000611c658383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250611e12565b90505b92915050565b6000611c6583836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250611e3e565b611cb8611f1d565b6040518060200160405280611ce5611cdf866ec097ce7bc90715b34b9f1000000000611c6e565b85611e8f565b90529392505050565b611cf6611f1d565b6040518060200160405280611ce585600001518560000151611dbe565b600081600160e01b8410611d3a5760405162461bcd60e51b815260040161051d9190612740565b509192915050565b6000816401000000008410611d3a5760405162461bcd60e51b815260040161051d9190612740565b611d72611f1d565b6040518060200160405280611ce585600001518560000151611c2b565b60006ec097ce7bc90715b34b9f1000000000611daf848460000151611c6e565b81611db657fe5b049392505050565b6000611c658383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250611ec2565b6000611c65611e0b84670de0b6b3a7640000611c6e565b8351611e8f565b60008184841115611e365760405162461bcd60e51b815260040161051d9190612740565b505050900390565b6000831580611e4b575082155b15611e5857506000610dd8565b83830283858281611e6557fe5b04148390611e865760405162461bcd60e51b815260040161051d9190612740565b50949350505050565b6000611c6583836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250611ee9565b60008383018285821015611e865760405162461bcd60e51b815260040161051d9190612740565b60008183611f0a5760405162461bcd60e51b815260040161051d9190612740565b50828481611f1457fe5b04949350505050565b6040518060200160405280600081525090565b8035611c6881612929565b600082601f830112611f4c57600080fd5b8135611f5f611f5a82612875565b61284e565b91508181835260208401935060208101905083856020840282011115611f8457600080fd5b60005b83811015611fb05781611f9a8882611f30565b8452506020928301929190910190600101611f87565b5050505092915050565b600082601f830112611fcb57600080fd5b8135611fd9611f5a82612875565b91508181835260208401935060208101905083856020840282011115611ffe57600080fd5b60005b83811015611fb0578161201488826120b0565b8452506020928301929190910190600101612001565b600082601f83011261203b57600080fd5b8151612049611f5a82612875565b9150818183526020840193506020810190508385602084028201111561206e57600080fd5b60005b83811015611fb0578161208488826120bb565b8452506020928301929190910190600101612071565b8035611c6881612940565b8051611c6881612940565b8035611c6881612949565b8051611c6881612949565b6000602082840312156120d857600080fd5b50919050565b6000602082840312156120f057600080fd5b6120fa602061284e565b905060006121088484612111565b82525092915050565b8035611c6881612952565b8051611c6881612952565b8035611c688161295b565b60006020828403121561214457600080fd5b60006121508484611f30565b949350505050565b6000806040838503121561216b57600080fd5b60006121778585611f30565b925050602061218885828601612111565b9150509250929050565b600080604083850312156121a557600080fd5b60006121b18585611f30565b925050602061218885828601611f30565b6000806000606084860312156121d757600080fd5b60006121e38686611f30565b93505060206121f486828701611f30565b9250506040612205868287016120c6565b9150509250925092565b60006020828403121561222157600080fd5b815167ffffffffffffffff81111561223857600080fd5b6121508482850161202a565b60006020828403121561225657600080fd5b600061215084846120a5565b60006020828403121561227457600080fd5b600061215084846120de565b60006020828403121561229257600080fd5b6000612150848461211c565b600080604083850312156122b157600080fd5b60006121b18585612127565b6000806000606084860312156122d257600080fd5b60006122de8686612127565b93505060206122ef86828701611f30565b925050604084013567ffffffffffffffff81111561230c57600080fd5b61220586828701611fba565b60008060006060848603121561232d57600080fd5b60006123398686612127565b935050602061234a86828701611f30565b925050604061220586828701611f30565b600080600080600060a0868803121561237357600080fd5b600061237f8888612127565b955050602086013567ffffffffffffffff81111561239c57600080fd5b6123a888828901611f3b565b945050604086013567ffffffffffffffff8111156123c557600080fd5b6123d188828901611fba565b93505060606123e28882890161209a565b92505060806123f38882890161209a565b9150509295509295909350565b60008060006060848603121561241557600080fd5b60006124218686612127565b9350506020612432868287016120b0565b925050604061220586828701612111565b61244c816128e8565b82525050565b61244c816128a3565b61244c816128b3565b600061246f82612896565b612479818561289a565b93506124898185602086016128f3565b6124928161291f565b9093019392505050565b60006124a960358361289a565b7f6f6e6c792061646d696e2063616e2075706461746520616e64206469737472698152746275746520626f72726f776572207265776172647360581b602082015260400192915050565b6000612500601b8361289a565b7f726577617264206d61726b6574206973206e6f74206c69737465640000000000815260200192915050565b600061253960158361289a565b741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b815260200192915050565b600061256a60188361289a565b7f6f6e6c792061646d696e2063616e206772616e74206a6f650000000000000000815260200192915050565b60006125a360358361289a565b7f6f6e6c792061646d696e2063616e2075706461746520616e64206469737472698152746275746520737570706c696572207265776172647360581b602082015260400192915050565b60006125fa60158361289a565b741c995dd85c99151e5c19481a5cc81a5b9d985b1a59605a1b815260200192915050565b600061262b601a8361289a565b7f696e73756666696369656e74206a6f6520666f72206772616e74000000000000815260200192915050565b600061266460258361289a565b7f5265776172644469737472696275746f7220616c726561647920696e697469618152641b1a5e995960da1b602082015260400192915050565b60006126ab601f8361289a565b7f6f6e6c792061646d696e2063616e207365742072657761726420737065656400815260200192915050565b61244c816128ca565b61244c816128d6565b61244c816128d9565b61244c816128e2565b60208101611c688284612452565b60208101611c688284612443565b604081016127258285612443565b610dd860208301846126e0565b60208101611c68828461245b565b60208082528101611c658184612464565b60208082528101611c688161249c565b60208082528101611c68816124f3565b60208082528101611c688161252c565b60208082528101611c688161255d565b60208082528101611c6881612596565b60208082528101611c68816125ed565b60208082528101611c688161261e565b60208082528101611c6881612657565b60208082528101611c688161269e565b60208101611c6882846126d7565b604081016127fd82856126d7565b610dd860208301846126e9565b60208101611c6882846126e0565b6040810161272582856126f2565b6060810161283482866126f2565b61284160208301856126e0565b61215060408301846126e0565b60405181810167ffffffffffffffff8111828210171561286d57600080fd5b604052919050565b600067ffffffffffffffff82111561288c57600080fd5b5060209081020190565b5190565b90815260200190565b6000611c68826128be565b151590565b6000611c68826128a3565b6001600160a01b031690565b6001600160e01b031690565b90565b63ffffffff1690565b60ff1690565b6000611c68826128b3565b60005b8381101561290e5781810151838201526020016128f6565b838111156106d45750506000910152565b601f01601f191690565b612932816128a3565b811461293d57600080fd5b50565b612932816128ae565b612932816128b3565b612932816128d6565b612932816128e256fe626c6f636b2074696d657374616d702065786365656473203332206269747300a365627a7a723158201eaff64c6496f5e8c5653a1a4681fb0770096c8f06a1d5bdfb919ba47d63b3556c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80637937969d116100ab5780639c39e2931161006f5780639c39e2931461033c578063cb15d8e21461035c578063d81c5e451461037e578063f06639831461039e578063f851a440146103be578063fcc4cfd1146103d357610135565b80637937969d146102bf578063796b89b9146102df5780638129fc1c146102f45780638805714b1461030957806388e972b81461031c57610135565b80634b3a0a74116100fd5780634b3a0a74146101ed5780636330533c1461021b57806366f91a241461023d578063670e8afd1461025f578063704b6c021461027f578063744532ae1461029f57610135565b806305b9783d146101375780630952c5631461016d5780631f9f35111461018d5780632b7e3434146101ad57806333fccb4a146101cd575b005b34801561014357600080fd5b5061015761015236600461229e565b6103f3565b604051610164919061280a565b60405180910390f35b34801561017957600080fd5b5061013561018836600461229e565b610410565b34801561019957600080fd5b506101356101a8366004612132565b6104a3565b3480156101b957600080fd5b506101576101c836600461229e565b6104dc565b3480156101d957600080fd5b506101356101e8366004612158565b6104f9565b3480156101f957600080fd5b5061020d61020836600461229e565b610592565b6040516101649291906127ef565b34801561022757600080fd5b506102306105c7565b6040516101649190612732565b34801561024957600080fd5b506102526105d6565b60405161016491906127e1565b34801561026b57600080fd5b5061013561027a366004612192565b6105e9565b34801561028b57600080fd5b5061013561029a366004612132565b61063d565b3480156102ab57600080fd5b506101356102ba3660046122bd565b610676565b3480156102cb57600080fd5b506101576102da366004612318565b6106da565b3480156102eb57600080fd5b506101576106fd565b34801561030057600080fd5b50610135610701565b61013561031736600461235b565b610752565b34801561032857600080fd5b50610157610337366004612318565b610aa6565b34801561034857600080fd5b506101356103573660046121c2565b610ac9565b34801561036857600080fd5b50610371610b36565b60405161016491906126fb565b34801561038a57600080fd5b5061020d61039936600461229e565b610b45565b3480156103aa57600080fd5b506101356103b9366004612400565b610b7a565b3480156103ca57600080fd5b50610371610bcd565b3480156103df57600080fd5b506101356103ee366004612132565b610bdc565b600760209081526000928352604080842090915290825290205481565b61049f8282600160009054906101000a90046001600160a01b03166001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ba919081019061220f565b5050565b6000546001600160a01b031633146104ba57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600260209081526000928352604080842090915290825290205481565b610501610c15565b6105265760405162461bcd60e51b815260040161051d90612781565b60405180910390fd5b600061053460008484610c3e565b905080156105545760405162461bcd60e51b815260040161051d906127b1565b7fb1df3cbf74dc2e3d8fdb5b5b2d6f752f79d2591a8978b01124135795c8b18d288383604051610585929190612717565b60405180910390a1505050565b60046020908152600092835260408084209091529082529020546001600160e01b03811690600160e01b900463ffffffff1682565b6001546001600160a01b031681565b6ec097ce7bc90715b34b9f100000000081565b6105f1610c15565b61060d5760405162461bcd60e51b815260040161051d90612791565b60005b60018160ff1611610638576106258184610ddf565b6106308184846110b0565b600101610610565b505050565b6000546001600160a01b0316331461065457600080fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160018082528183019092526060916020808301908038833901905050905082816000815181106106a657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506106d4848284600180610752565b50505050565b600660209081526000938452604080852082529284528284209052825290205481565b4290565b600854600160a01b900460ff161561072b5760405162461bcd60e51b815260040161051d906127c1565b600180546001600160a01b031916331790556008805460ff60a01b1916600160a01b179055565b60018560ff1611156107765760405162461bcd60e51b815260040161051d906127a1565b60005b8351811015610a9e57600084828151811061079057fe5b6020908102919091010151600154604051633d98a1e560e01b81529192506001600160a01b031690633d98a1e5906107cc9084906004016126fb565b60206040518083038186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061081c9190810190612244565b6108385760405162461bcd60e51b815260040161051d90612771565b600184151514156109c35761084b611f1d565b6040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108c79190810190612280565b905290506108d68883836112ea565b60005b87518110156109c05761090189848a84815181106108f357fe5b6020026020010151856115fc565b6109718960ff1689838151811061091457fe5b6020026020010151600760008d60ff1660ff16815260200190815260200160002060008c868151811061094357fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054610c3e565b60ff8a1660009081526007602052604081208a519091908b908590811061099457fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016108d9565b50505b60018315151415610a95576109d88782610ddf565b60005b8651811015610a9357610a0288838984815181106109f557fe5b60200260200101516110b0565b610a448860ff16888381518110610a1557fe5b6020026020010151600760008c60ff1660ff16815260200190815260200160002060008b868151811061094357fe5b60ff8916600090815260076020526040812089519091908a9085908110610a6757fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016109db565b505b50600101610779565b505050505050565b600560209081526000938452604080852082529284528284209052825290205481565b610ad1610c15565b610aed5760405162461bcd60e51b815260040161051d90612751565b60005b60018160ff16116106d457610b148185610b0f36869003860186612262565b6112ea565b610b2e818585610b2936879003870187612262565b6115fc565b600101610af0565b6008546001600160a01b031681565b60036020908152600092835260408084209091529082529020546001600160e01b03811690600160e01b900463ffffffff1682565b60018360ff161115610b9e5760405162461bcd60e51b815260040161051d906127a1565b610ba6610c15565b610bc25760405162461bcd60e51b815260040161051d906127d1565b610638838383611805565b6000546001600160a01b031681565b6000546001600160a01b03163314610bf357600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b0316331480610c3957506001546001600160a01b031633145b905090565b600083610d74576008546040516370a0823160e01b81526001600160a01b039091169060009082906370a0823190610c7a903090600401612709565b60206040518083038186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cca9190810190612280565b9050600084118015610cdc5750808411155b15610d6d5760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610d0f9088908890600401612717565b602060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d619190810190612244565b50600092505050610dd8565b5050610dd5565b8360011415610dd557478215801590610d8d5750808311155b15610dd3576040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015610dc8573d6000803e3d6000fd5b506000915050610dd8565b505b50805b9392505050565b60018260ff161115610e035760405162461bcd60e51b815260040161051d906127a1565b60ff821660008181526003602090815260408083206001600160a01b0386168085529083528184209484526002835281842090845290915281205490610e476106fd565b8354909150600090610e67908390600160e01b900463ffffffff16611c2b565b9050600081118015610e795750600083115b15611056576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ef19190810190612280565b90506000610eff8386611c6e565b9050610f09611f1d565b60008311610f265760405180602001604052806000815250610f30565b610f308284611cb0565b9050610f3a611f1d565b604080516020810190915288546001600160e01b03168152610f5c9083611cee565b90506040518060400160405280610fac83600001516040518060400160405280601a81526020017f6e657720696e6465782065786365656473203232342062697473000000000000815250611d13565b6001600160e01b03168152602001610fe7886040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b63ffffffff90811690915260ff8c1660009081526003602090815260408083206001600160a01b038f1684528252909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b0319909416939093171691909117905550610a9e92505050565b8015610a9e57611089826040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b60018360ff1611156110d45760405162461bcd60e51b815260040161051d906127a1565b60ff831660009081526003602090815260408083206001600160a01b03861684529091529020611102611f1d565b50604080516020810190915281546001600160e01b03168152611123611f1d565b50604080516020808201835260ff88166000908152600582528381206001600160a01b03808a1683529083528482209088168083528184529482208054855286519590925290915291909155805115801561117e5750815115155b15611196576ec097ce7bc90715b34b9f100000000081525b61119e611f1d565b6111a88383611d6a565b90506000866001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016111d891906126fb565b60206040518083038186803b1580156111f057600080fd5b505afa158015611204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112289190810190612280565b905060006112368284611d8f565b60ff8a1660009081526007602090815260408083206001600160a01b038c1684529091528120549192509061126b9083611dbe565b60ff8b1660009081526007602090815260408083206001600160a01b03808e168086529190935292819020849055895190519394509192908c16917faccd035d02c456be35306aecd5a5fe62320713dde09ccd68b0a5e8ed93039999916112d6918f91889190612826565b60405180910390a350505050505050505050565b60018360ff16111561130e5760405162461bcd60e51b815260040161051d906127a1565b60ff831660008181526004602090815260408083206001600160a01b03871680855290835281842094845260028352818420908452909152812054906113526106fd565b8354909150600090611372908390600160e01b900463ffffffff16611c2b565b90506000811180156113845750600083115b156115a0576000611405876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ff9190810190612280565b87611df4565b905060006114138386611c6e565b905061141d611f1d565b6000831161143a5760405180602001604052806000815250611444565b6114448284611cb0565b905061144e611f1d565b604080516020810190915288546001600160e01b031681526114709083611cee565b905060405180604001604052806114c083600001516040518060400160405280601a81526020017f6e657720696e6465782065786365656473203232342062697473000000000000815250611d13565b6001600160e01b031681526020016114fb886040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b63ffffffff16815250600460008d60ff1660ff16815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160e01b0302191690836001600160e01b03160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050505050506115f3565b80156115f3576115d3826040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b845463ffffffff91909116600160e01b026001600160e01b039091161784555b50505050505050565b60018460ff1611156116205760405162461bcd60e51b815260040161051d906127a1565b60ff841660009081526004602090815260408083206001600160a01b0387168452909152902061164e611f1d565b50604080516020810190915281546001600160e01b0316815261166f611f1d565b50604080516020808201835260ff89166000908152600682528381206001600160a01b03808b16835290835284822090891680835281845294822080548552865195909252909152919091558051156115f3576116ca611f1d565b6116d48383611d6a565b9050600061171f886001600160a01b03166395dd9193896040518263ffffffff1660e01b815260040161170791906126fb565b60206040518083038186803b1580156113c757600080fd5b9050600061172d8284611d8f565b60ff8b1660009081526007602090815260408083206001600160a01b038d168452909152812054919250906117629083611dbe565b905080600760008d60ff1660ff16815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002081905550886001600160a01b03168a6001600160a01b03167fa1b6a046664a0ecf068059f26de56878f8d0e799907ca2e42d9148ccbdc717a78d858a600001516040516117f093929190612826565b60405180910390a35050505050505050505050565b60ff831660009081526002602090815260408083206001600160a01b038616845290915290205480156118d55761183a611f1d565b6040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561187e57600080fd5b505afa158015611892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118b69190810190612280565b905290506118c48585610ddf565b6118cf8585836112ea565b50611bba565b8115611bba57600154604051633d98a1e560e01b81526001600160a01b0390911690633d98a1e59061190b9086906004016126fb565b60206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061195b9190810190612244565b6119775760405162461bcd60e51b815260040161051d90612761565b60ff841660009081526003602090815260408083206001600160a01b03871684529091529020546001600160e01b03161580156119e5575060ff841660009081526003602090815260408083206001600160a01b0387168452909152902054600160e01b900463ffffffff16155b15611aad5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b03168152602001611a47611a1e6106fd565b6040518060400160405280601f8152602001600080516020612965833981519152815250611d42565b63ffffffff90811690915260ff861660009081526003602090815260408083206001600160a01b03891684528252909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b60ff841660009081526004602090815260408083206001600160a01b03871684529091529020546001600160e01b0316158015611b1b575060ff841660009081526004602090815260408083206001600160a01b0387168452909152902054600160e01b900463ffffffff16155b15611bba5760405180604001604052806ec097ce7bc90715b34b9f10000000006001600160e01b03168152602001611b54611a1e6106fd565b63ffffffff90811690915260ff861660009081526004602090815260408083206001600160a01b03891684528252909120835181549490920151909216600160e01b026001600160e01b039182166001600160e01b031990941693909317169190911790555b8181146106d45760ff841660009081526002602090815260408083206001600160a01b03871680855292529182902084905590517fbcd6f688f6b32a7abece90e35e19187f0d25af4d6661fe99791a3b69a2defded90611c1d9087908690612818565b60405180910390a250505050565b6000611c658383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250611e12565b90505b92915050565b6000611c6583836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250611e3e565b611cb8611f1d565b6040518060200160405280611ce5611cdf866ec097ce7bc90715b34b9f1000000000611c6e565b85611e8f565b90529392505050565b611cf6611f1d565b6040518060200160405280611ce585600001518560000151611dbe565b600081600160e01b8410611d3a5760405162461bcd60e51b815260040161051d9190612740565b509192915050565b6000816401000000008410611d3a5760405162461bcd60e51b815260040161051d9190612740565b611d72611f1d565b6040518060200160405280611ce585600001518560000151611c2b565b60006ec097ce7bc90715b34b9f1000000000611daf848460000151611c6e565b81611db657fe5b049392505050565b6000611c658383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250611ec2565b6000611c65611e0b84670de0b6b3a7640000611c6e565b8351611e8f565b60008184841115611e365760405162461bcd60e51b815260040161051d9190612740565b505050900390565b6000831580611e4b575082155b15611e5857506000610dd8565b83830283858281611e6557fe5b04148390611e865760405162461bcd60e51b815260040161051d9190612740565b50949350505050565b6000611c6583836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250611ee9565b60008383018285821015611e865760405162461bcd60e51b815260040161051d9190612740565b60008183611f0a5760405162461bcd60e51b815260040161051d9190612740565b50828481611f1457fe5b04949350505050565b6040518060200160405280600081525090565b8035611c6881612929565b600082601f830112611f4c57600080fd5b8135611f5f611f5a82612875565b61284e565b91508181835260208401935060208101905083856020840282011115611f8457600080fd5b60005b83811015611fb05781611f9a8882611f30565b8452506020928301929190910190600101611f87565b5050505092915050565b600082601f830112611fcb57600080fd5b8135611fd9611f5a82612875565b91508181835260208401935060208101905083856020840282011115611ffe57600080fd5b60005b83811015611fb0578161201488826120b0565b8452506020928301929190910190600101612001565b600082601f83011261203b57600080fd5b8151612049611f5a82612875565b9150818183526020840193506020810190508385602084028201111561206e57600080fd5b60005b83811015611fb0578161208488826120bb565b8452506020928301929190910190600101612071565b8035611c6881612940565b8051611c6881612940565b8035611c6881612949565b8051611c6881612949565b6000602082840312156120d857600080fd5b50919050565b6000602082840312156120f057600080fd5b6120fa602061284e565b905060006121088484612111565b82525092915050565b8035611c6881612952565b8051611c6881612952565b8035611c688161295b565b60006020828403121561214457600080fd5b60006121508484611f30565b949350505050565b6000806040838503121561216b57600080fd5b60006121778585611f30565b925050602061218885828601612111565b9150509250929050565b600080604083850312156121a557600080fd5b60006121b18585611f30565b925050602061218885828601611f30565b6000806000606084860312156121d757600080fd5b60006121e38686611f30565b93505060206121f486828701611f30565b9250506040612205868287016120c6565b9150509250925092565b60006020828403121561222157600080fd5b815167ffffffffffffffff81111561223857600080fd5b6121508482850161202a565b60006020828403121561225657600080fd5b600061215084846120a5565b60006020828403121561227457600080fd5b600061215084846120de565b60006020828403121561229257600080fd5b6000612150848461211c565b600080604083850312156122b157600080fd5b60006121b18585612127565b6000806000606084860312156122d257600080fd5b60006122de8686612127565b93505060206122ef86828701611f30565b925050604084013567ffffffffffffffff81111561230c57600080fd5b61220586828701611fba565b60008060006060848603121561232d57600080fd5b60006123398686612127565b935050602061234a86828701611f30565b925050604061220586828701611f30565b600080600080600060a0868803121561237357600080fd5b600061237f8888612127565b955050602086013567ffffffffffffffff81111561239c57600080fd5b6123a888828901611f3b565b945050604086013567ffffffffffffffff8111156123c557600080fd5b6123d188828901611fba565b93505060606123e28882890161209a565b92505060806123f38882890161209a565b9150509295509295909350565b60008060006060848603121561241557600080fd5b60006124218686612127565b9350506020612432868287016120b0565b925050604061220586828701612111565b61244c816128e8565b82525050565b61244c816128a3565b61244c816128b3565b600061246f82612896565b612479818561289a565b93506124898185602086016128f3565b6124928161291f565b9093019392505050565b60006124a960358361289a565b7f6f6e6c792061646d696e2063616e2075706461746520616e64206469737472698152746275746520626f72726f776572207265776172647360581b602082015260400192915050565b6000612500601b8361289a565b7f726577617264206d61726b6574206973206e6f74206c69737465640000000000815260200192915050565b600061253960158361289a565b741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b815260200192915050565b600061256a60188361289a565b7f6f6e6c792061646d696e2063616e206772616e74206a6f650000000000000000815260200192915050565b60006125a360358361289a565b7f6f6e6c792061646d696e2063616e2075706461746520616e64206469737472698152746275746520737570706c696572207265776172647360581b602082015260400192915050565b60006125fa60158361289a565b741c995dd85c99151e5c19481a5cc81a5b9d985b1a59605a1b815260200192915050565b600061262b601a8361289a565b7f696e73756666696369656e74206a6f6520666f72206772616e74000000000000815260200192915050565b600061266460258361289a565b7f5265776172644469737472696275746f7220616c726561647920696e697469618152641b1a5e995960da1b602082015260400192915050565b60006126ab601f8361289a565b7f6f6e6c792061646d696e2063616e207365742072657761726420737065656400815260200192915050565b61244c816128ca565b61244c816128d6565b61244c816128d9565b61244c816128e2565b60208101611c688284612452565b60208101611c688284612443565b604081016127258285612443565b610dd860208301846126e0565b60208101611c68828461245b565b60208082528101611c658184612464565b60208082528101611c688161249c565b60208082528101611c68816124f3565b60208082528101611c688161252c565b60208082528101611c688161255d565b60208082528101611c6881612596565b60208082528101611c68816125ed565b60208082528101611c688161261e565b60208082528101611c6881612657565b60208082528101611c688161269e565b60208101611c6882846126d7565b604081016127fd82856126d7565b610dd860208301846126e9565b60208101611c6882846126e0565b6040810161272582856126f2565b6060810161283482866126f2565b61284160208301856126e0565b61215060408301846126e0565b60405181810167ffffffffffffffff8111828210171561286d57600080fd5b604052919050565b600067ffffffffffffffff82111561288c57600080fd5b5060209081020190565b5190565b90815260200190565b6000611c68826128be565b151590565b6000611c68826128a3565b6001600160a01b031690565b6001600160e01b031690565b90565b63ffffffff1690565b60ff1690565b6000611c68826128b3565b60005b8381101561290e5781810151838201526020016128f6565b838111156106d45750506000910152565b601f01601f191690565b612932816128a3565b811461293d57600080fd5b50565b612932816128ae565b612932816128b3565b612932816128d6565b612932816128e256fe626c6f636b2074696d657374616d702065786365656473203332206269747300a365627a7a723158201eaff64c6496f5e8c5653a1a4681fb0770096c8f06a1d5bdfb919ba47d63b3556c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {
      "_grantJoe(address,uint256)": {
        "details": "Note: If there is not enough JOE, we do not perform the transfer all.",
        "params": {
          "amount": "The amount of JOE to (possibly) transfer",
          "recipient": "The address of the recipient to transfer JOE to"
        }
      },
      "_setRewardSpeed(uint8,address,uint256)": {
        "params": {
          "gToken": "The market whose reward speed to update",
          "rewardSpeed": "New reward speed for market",
          "rewardType": "0 = QI, 1 = AVAX"
        }
      },
      "claimReward(uint8,address)": {
        "params": {
          "holder": "The address to claim JOE/AVAX for"
        }
      },
      "claimReward(uint8,address,address[])": {
        "params": {
          "holder": "The address to claim JOE/AVAX for",
          "gTokens": "The list of markets to claim JOE/AVAX in"
        }
      },
      "claimReward(uint8,address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim JOE/AVAX earned by borrowing",
          "holders": "The addresses to claim JOE/AVAX for",
          "gTokens": "The list of markets to claim JOE/AVAX in",
          "rewardType": "0 = JOE, 1 = AVAX",
          "suppliers": "Whether or not to claim JOE/AVAX earned by supplying"
        }
      },
      "updateAndDistributeBorrowerRewardsForToken(address,address,(uint256))": {
        "params": {
          "borrower": "Borrower to be rewarded",
          "gToken": "The market to verify the mint against"
        }
      },
      "updateAndDistributeSupplierRewardsForToken(address,address)": {
        "params": {
          "gToken": "The market to verify the mint against",
          "supplier": "The supplier to be rewarded"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "_grantJoe(address,uint256)": {
        "notice": "Transfer JOE to the recipient"
      },
      "_setRewardSpeed(uint8,address,uint256)": {
        "notice": "Set JOE/AVAX speed for a single market"
      },
      "claimReward(uint8,address)": {
        "notice": "Claim all the JOE/AVAX accrued by holder in all markets"
      },
      "claimReward(uint8,address,address[])": {
        "notice": "Claim all the JOE/AVAX accrued by holder in the specified markets"
      },
      "claimReward(uint8,address[],address[],bool,bool)": {
        "notice": "Claim all JOE/AVAX  accrued by the holders"
      },
      "setAdmin(address)": {
        "notice": "Set the admin"
      },
      "setJoeAddress(address)": {
        "notice": "Set the JOE token address"
      },
      "setGtroller(address)": {
        "notice": "Set the Gtroller address"
      },
      "updateAndDistributeBorrowerRewardsForToken(address,address,(uint256))": {
        "notice": "Refactored function to calc and rewards accounts supplier rewards"
      },
      "updateAndDistributeSupplierRewardsForToken(address,address)": {
        "notice": "Refactored function to calc and rewards accounts supplier rewards"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23086,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23088,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "gTroller",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Gtroller)20580"
      },
      {
        "astId": 23099,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardSpeeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23105,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardSupplyState",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(RewardMarketState)23093_storage))"
      },
      {
        "astId": 23111,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardBorrowState",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_struct(RewardMarketState)23093_storage))"
      },
      {
        "astId": 23119,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardSupplierIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 23127,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardBorrowerIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 23133,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardAccrued",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint8,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23138,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "joeAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 23183,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "initialized",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Gtroller)20580": {
        "encoding": "inplace",
        "label": "contract Gtroller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardMarketState)23093_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardDistributorStorage.RewardMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardMarketState)23093_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint8,t_mapping(t_address,t_struct(RewardMarketState)23093_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(address => struct RewardDistributorStorage.RewardMarketState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RewardMarketState)23093_storage)"
      },
      "t_mapping(t_uint8,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(RewardMarketState)23093_storage": {
        "encoding": "inplace",
        "label": "struct RewardDistributorStorage.RewardMarketState",
        "members": [
          {
            "astId": 23090,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 23092,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
